var vType='';
var subvType='';
var OUCountry='';
var OUState='';
var helper_OUState='';
var taxLoaded=false;
var BeginColumns=0;
var GloadTaxes=false;
var firstLoaded=false;
Erp.Grid.OnCellChanged('gridAgainstBill',GridCellChangedgridAgainstBill);
Erp.Grid.OnCellValidating('gridAgainstBill',OnCellValidating);
Erp.Grid.OnCellValidating('gridTI',OnCellValidating_gridTI);
Erp.Grid.OnGridDataBound('dgAgainstCN',OnGridDataBound_AgainstCN);
Erp.Grid.OnGridDataBound('gridAgainstBill',OnGridDataBound_AgainstBill);
Erp.Grid.OnCellChanged('dgAgainstCN',GridCellChangeddgAgainstCN);
Erp.Grid.OnCellValidating('dgAgainstCN',OnCellValidating1);
Erp.Grid.OnGridDataBound('gridTD',OnGridDataBoundTD);
Erp.Grid.OnRowDataBound('gridTI',GridRowDataBoundTI);
Erp.Grid.OnGridDataBound('gridTI',GridDataBoundTI);
Erp.Grid.OnCellChanged('gridTI',GridCellChangedTI);
Erp.Grid.OnRowAdding('gridTI',dgTiRowAdding);
Erp.Grid.OnCellChanged('gridOC',GridCellChangedOC);
Erp.Grid.OnRowAdding('gridOC',GridOCRowAddingOC);
Erp.Grid.OnCellEditing('gridTI',GridCellEditingTI);
Erp.Grid.OnGridDataBound('gridOC',OnGridDataBoundOC);
Erp.Grid.OnCellEditing('dgAdvInv',OnCellEditing_dgAdvInv);
Erp.Grid.OnCellChanged('dgAdvInv',OnCellChanged_dgAdvInv);
Erp.Grid.OnCellEditing('gridOC',OnCellEditingOC);
Erp.Grid.OnGridDataBound('dgAdvInv',OnGridDataBound_dgAdvInv);
function CustomSave()
{
  if(Erp.LayoutMode == "A")
    Erp.SetFieldValue('@rs','Approved');
  Erp.Grid.SaveChanges('gridTD');
  Erp.Grid.SaveChanges('gridDocs');
  Erp.SaveWindow();
}
function IsAdvanceChecked()
{
  if (vType=='R'  || subvType=='AR'  || vType=='RV'  )
  {
    Erp.SetDisplay('tblSupplydetails',Fn.CBool(Erp.GetFieldValue('@tbl_erp_t_isadvance')));
    Erp.SetDisplay('gridTI',Fn.CBool(Erp.GetFieldValue('@tbl_erp_t_isadvance')));
  }
  else if ( vType=='PY'  || subvType=='AP' )
  {
    Erp.SetDisplay('tblSupplydetails',Fn.CBool(Erp.GetFieldValue('@tbl_erp_t_isadvance')) && Fn.CBool(Erp.GetFieldValue('@tbl_erp_t_isreversechargeapplicable')));
    if(subvType=='AP' )
      Erp.SetDisplay('gridTI',Fn.CBool(Erp.GetFieldValue('@tbl_erp_t_isadvance')));
    else
      Erp.SetDisplay('gridTI',Fn.CBool(Erp.GetFieldValue('@tbl_erp_t_isadvance')) && Fn.CBool(Erp.GetFieldValue('@tbl_erp_t_isreversechargeapplicable')));
  }
}
function Togglepercentage()
{
  Erp.SetDisplay("trRCM",Fn.CBool(Erp.GetFieldValue("@isreversechargeapplicable")));
  if(vType == "AR"){
    if(!Fn.CBool(Erp.GetFieldValue("@isreversechargeapplicable"))){
      GloadTaxes=true;
      setTaxes();
    }
  }
  if(vType == "AR"  || vType=='RV' )
    CalcTaxesAll();
  CalcTotalsAll();
  IsAdvanceChecked();
  FinalShowOfTotals();
  if( vType=='P' ){
    Erp.SetDisplay("@isinvoiceagainstadvance",Fn.CBool(Erp.GetFieldValue("@isreversechargeapplicable")));
    Erp.SetDisplay("trAgainstAdvance",Fn.CBool(Erp.GetFieldValue("@isreversechargeapplicable")))
    Erp.SetDisplay("btnAdvInv",Fn.CBool(Erp.GetFieldValue("@isreversechargeapplicable")));
    resetAdvanceInv();
    isinvoiceagainstadvance_changed();
  }
   if( vType == "P" && !Fn.IsEmpty( Erp.GetFieldValue('@tbl_erp_t_helper_am')))
  {
    if(Fn.IsEmpty( db_fld_0)  && !Erp.GetFieldValue('@tbl_erp_t_isreversechargeapplicable')){
      Erp.ShowMessage("Since GSTIN of this vendor is not available, You should mark this transaction for Reverse Charge.");
      return false;
    }
     else
      Erp.HideMessage();
  }
}
function Toggletransactiondetails()
{
  if(Fn.IsEmpty(Erp.GetFieldValue("@helper_tm")))
  {
    Erp.SetDisplay('@helper_tmreferenceno',false);
    Erp.SetDisplay('@helper_chequedate',false);
    Erp.SetDisplay('@helper_chequedrawnon',false);
    Erp.SetDisplay('lblDrawnOn',false);
    Erp.SetDisplay('lblChqDate',false);
    Erp.SetDisplay('lblRefNo',false);
    Erp.SetDisplay('trBankDetails',false);
  }
  else{
    var tbankmode=db_fld_1;
    Erp.SetDisplay('@helper_tmreferenceno',!(tbankmode=="Cash"));
    Erp.SetDisplay('@helper_chequedate',!(tbankmode=="Cash"));
    Erp.SetDisplay('@helper_chequedrawnon',!(tbankmode=="Cash"));
    Erp.SetDisplay('lblDrawnOn',!(tbankmode=="Cash"));
    Erp.SetDisplay('lblChqDate',!(tbankmode=="Cash"));
    Erp.SetDisplay('lblRefNo',!(tbankmode=="Cash"));
    Erp.SetDisplay('trBankDetails',!(tbankmode=="Cash"));
    if(tbankmode == "Cheque")
    {
      Erp.SetLabel('lblChqDate',"Cheque Date");
      Erp.SetLabel('lblRefNo',"Cheque No");
    }
    else if(tbankmode == "BT")
    {
      Erp.SetLabel('lblChqDate',"Bank Transfer Date");
      Erp.SetLabel('lblRefNo',"Reference No");
    }
  }
  //if(db_fld_1=="Cheque")
  //Erp.SetLabel('@helper_tmreferenceno','Cheque No');
  //else if  (db_fld_1=="BT")
  //Erp.SetLabel('@helper_tmreferenceno','Reference No');
}
function Toggle_exportdetails()
{
  var isExport=false;
  var ex_Code=Fn.ToUpperCase( db_fld_4);
  if(ex_Code =="WPAY" || ex_Code == "WOPAY")
    isExport=true;
  Erp.SetDisplay('@export_billno',isExport);
  Erp.SetDisplay('@export_billdate',isExport);
  Erp.SetDisplay('@exportport',isExport);
  Erp.SetDisplay('trExportDetails',isExport);
  Erp.SetMandatory('@export_billno',isExport);
  Erp.SetMandatory('@export_billdate',isExport);
  Erp.SetMandatory('@exportport',isExport);
}
function Toggle_importdetails()
{
  var isImport=false;
  var im_Code=Fn.ToUpperCase( db_fld_4);
  if(im_Code =="IMPG" )
    isImport=true;
  Erp.SetDisplay('@import_billofvalue',isImport);
  Erp.SetDisplay('@import_billno',isImport);
  Erp.SetDisplay('@import_billdate',isImport);
  Erp.SetDisplay('@importport',isImport);
  Erp.SetDisplay('trImportDetails',isImport);
  Erp.SetMandatory('@import_billofvalue',isImport);
  Erp.SetMandatory('@import_billno',isImport);
  Erp.SetMandatory('@import_billdate',isImport);
  Erp.SetMandatory('@importport',isImport);
}
function refreshtm(agcode)
{
  var _agCode=db_fld_6;
  if(!Fn.IsEmpty(agcode) )
    _agCode=agcode ;
  if(_agCode=="CH")
    Erp.SetParam('@helper_tm','Filter','Filter_cash');
  else if(_agCode=="BA")
    Erp.SetParam('@helper_tm','Filter','Filter_No_cash');
}
function refreshtm1()
{
  var agcode=db_fld_6;
  /*if(!GloadTaxes)
    Erp.SetFieldValue('@helper_tm','');*/
  refreshtm(agcode);
}
function SiteOUChanged(elem,data,field)
{
  if (data!=null && data.Keys != undefined)
    if (data.Keys.length>0)
      Erp.SetFieldValue('@currency',data.Keys[0]);
  //Currency  
  Erp.SetFieldValue('@previoustr','');
  Erp.SetFieldValue('@taxreg','');
  Erp.SetParam('@previoustr','taxreg',Erp.GetFieldValue("@taxreg"));
  Erp.SetParam('@taxreg','OU',Erp.GetFieldValue("@siteou"));
}
function SaveCountryState()
{
  OUCountry=db_fld_8;
  OUState=db_fld_9;
}
function helperAMChanged(elem,data,field)  //party
{
  SaveHelperState();
  if(WhetherIncomingSupplyType()){
  }
  else
    Erp.SetFieldValue('@pos',helper_OUState);
  if (vType=='S' || vType=='DC'  || vType == 'PI' || vType == 'Q'  || vType == 'BOS'   || vType == 'SO' )
  {
    Erp.SetFieldValue('@salesconsigneeam',Erp.GetFieldValue('@tbl_erp_t_helper_am'));
    // Erp.SetFieldValue('@isexport',db_fld_10);
    Toggle_exportdetails();
  }
  if(vType=='R' )
  {
    //console.log(Erp.GetFieldValue('@tbl_erp_t_helper_am'));
    Erp.SetParam('gridAgainstBill','partyid',Erp.GetFieldValue('@tbl_erp_t_helper_am'));
    Erp.Grid.Filter('gridAgainstBill','filter_sales',false);
    Erp.Grid.Refresh('gridAgainstBill');
  }
  if(vType=='M')
  {
    //console.log(Erp.GetFieldValue('@tbl_erp_t_helper_am'));
    //toggleMatchingGrids(true);
    Erp.SetParam('gridAgainstBill','partyid',Erp.GetFieldValue('@tbl_erp_t_helper_am'));
    Erp.Grid.Filter('gridAgainstBill','filter_matching',false);
    Erp.Grid.Refresh('gridAgainstBill');
    Erp.SetParam('dgAgainstCN','partyid',Erp.GetFieldValue('@tbl_erp_t_helper_am'));
    Erp.Grid.Refresh('dgAgainstCN');
    /*Erp.SetParam('dgAgainstDN','partyid',Erp.GetFieldValue('@tbl_erp_t_helper_am'));
    Erp.Grid.Refresh('dgAgainstDN');*/
  }
  if(vType=='PY')
  {
    //console.log(Erp.GetFieldValue('@tbl_erp_t_helper_am'));
    Erp.SetParam('gridAgainstBill','partyid',Erp.GetFieldValue('@tbl_erp_t_helper_am'));
    Erp.Grid.Filter('gridAgainstBill','Filter_payment',false);
    Erp.Grid.Refresh('gridAgainstBill');
  }
  if(!Fn.IsEmpty(db_fld_11) && vType != 'BOS')
    Erp.SetFieldValue('@gstsupplycategory',db_fld_11);
  SetPreviousTRReference();
  ChangeSupplyType();
  LoadTaxList();
  setTransType();
  resetAdvanceInv();
  Erp.Grid.DataBind('dgAdvInv',[]);
  
   if( vType == "P" && !Fn.IsEmpty( Erp.GetFieldValue('@tbl_erp_t_helper_am')))
  {
    if(Fn.IsEmpty( db_fld_0)  && !Erp.GetFieldValue('@tbl_erp_t_isreversechargeapplicable')){
      Erp.ShowMessage("Since GSTIN of this vendor is not available, You should mark this transaction for Reverse Charge.");
      return false;
    }
     else
      Erp.HideMessage();
  }
}
function resetAdvanceInv()
{
  if(vType == "S" || vType =="P" || vType=='DC'  || vType == 'PI' || vType == 'Q'  || vType == 'BOS'   || vType == 'SO'  )
  {
    isinvoiceagainstadvance_changed();
  }
}
function SetPreviousTRReference()
{
  var tscnmode=Erp.GetFieldValue('@modeoftransactionnote');
  if(Fn.Eq(tscnmode, "AgainstPurchase"))
    tscnmode="P,E";
  else{
    if(vType == 'RV')
      tscnmode="R";
    else
      tscnmode="S";
  }
  if (vType=='DN')
  {
    Erp.SetParam('@previoustr','Party',Erp.GetFieldValue('@tbl_erp_t_helper_am'));
    Erp.SetParam('@previoustr','TMode',tscnmode);
    Erp.SetParam('@previoustr','DOR',Erp.GetFieldValue('@tbl_erp_t_dot'));
    if(Fn.Eq(Erp.GetFieldValue('@modeoftransactionnote'), "AgainstPurchase")){
      Erp.SetParam('@previoustr','_fc','lu_PreviousPurchaseReference');
      Erp.SetParam('@helper_am','_fc','PurchaseParty');
    }
    else{
      Erp.SetParam('@previoustr','_fc','lu_PreviousSalesReference');
      Erp.SetParam('@helper_am','_fc','SalesParty');
    }
  }
  else if (vType=='CN')
  {
    Erp.SetParam('@previoustr','Party',Erp.GetFieldValue('@tbl_erp_t_helper_am'));
    Erp.SetParam('@previoustr','TMode',tscnmode);
    Erp.SetParam('@previoustr','DOR',Erp.GetFieldValue('@tbl_erp_t_dot'));
    if(Fn.Eq(Erp.GetFieldValue('@modeoftransactionnote'), "AgainstPurchase")){
      Erp.SetParam('@previoustr','_fc','lu_PreviousPurchaseReference');
      Erp.SetParam('@helper_am','_fc','PurchaseParty');
    }
    else{
      Erp.SetParam('@previoustr','_fc','lu_PreviousSalesReference');
      Erp.SetParam('@helper_am','_fc','SalesParty');
    }
  }
  else if (vType=='RV')
  {
    Erp.SetParam('@previoustr','Party',Erp.GetFieldValue('@tbl_erp_t_helper_am'));
    Erp.SetParam('@previoustr','TMode',tscnmode);
    Erp.SetParam('@previoustr','DOR',Erp.GetFieldValue('@tbl_erp_t_dot'));
    Erp.SetParam('@previoustr','_fc','lu_PreviousRVReference');
  }
  hideCdNo();
}
function ChangeSupplyType()
{
  var invCode=db_fld_4;
  if ( Fn.Eq(invCode ,"DE")  || Fn.Eq(invCode ,"WPAY") || Fn.Eq(invCode ,"WOPAY") || Fn.Eq(invCode ,"IMPG")  || Fn.Eq(invCode ,"IMPS") || Fn.Eq(invCode ,"SEWP")  || Fn.Eq(invCode ,"SEWOP"))
    Erp.SetFieldValue('@supplytype','IES','Inter-State');
  else
  {
    if(!WhetherIncomingSupplyType() ){
      if(db_fld_9 !=Erp.GetFieldValue('@tbl_erp_t_pos') )
        Erp.SetFieldValue('@supplytype','IES','Inter-State');
      else
        Erp.SetFieldValue('@supplytype','IAS','Intra-State');
    }
    else
    {
      if(helper_OUState !=Erp.GetFieldValue('@tbl_erp_t_pos') )
        Erp.SetFieldValue('@supplytype','IES','Inter-State');
      else
        Erp.SetFieldValue('@supplytype','IAS','Intra-State');
    }
  }
  Erp.TriggerEvent("@supplytype","change",SupplyTypeChanged);
}
function SaveHelperState()
{
  helper_OUState=db_fld_16;
}
function SupplyTypeChanged(elem,data,field)
{
  GloadTaxes=true;
  LoadTaxList();
  setTransType();
}
function LoadTaxList()
{
  if (vType=='P' || vType=='E' || vType=='DN' || vType=='S' || vType=='CN' || vType=='R' || vType=='PY'  || subvType=='AR'   || subvType=='AP' || vType=='RV'  || vType=='DC'  || vType == 'PI' || vType == 'Q'  || vType == 'BOS'    || vType == 'SO'  )
  {
    if (!(Fn.IsEmpty(Erp.GetFieldValue('@tbl_erp_t_siteou')) || Fn.IsEmpty(Erp.GetFieldValue('@tbl_erp_t_helper_am')) || Fn.IsEmpty(Erp.GetFieldValue('@tbl_erp_t_supplytype')) || Fn.IsEmpty(Erp.GetFieldValue('@tbl_erp_t_taxreg'))))    
      Erp.LoadVariable('TaxList',taxListLoaded);
  }
}
function taxListLoaded(result)
{
  //console.log(TaxList);
  //taxLoaded=false;
  if (taxLoaded==false)
  {
    CreateTaxColumns();
    taxLoaded=true;
  }
  HideUnhideColumns();
  setTaxes();
  if(loadPrevTr)
    setItemDataToGrid();
}
function CreateTaxColumns()
{
  var modeof_t=Fn.ToLowerCase( Erp.GetFieldValue("@modeoftransactionnote"));
  if(Erp.Grid._getGridView('gridTI') == null)
    return;
  BeginColumns=Erp.Grid._getGridView('gridTI').get_columns().length;
  for (var i=0; i<TaxList.length;i++)
  {
    var amid="";
    if(vType=='P' || vType=='E' ||  ((vType=='CN' || vType=='DN') && Fn.Eq(modeof_t,"againstpurchase")) || vType=='PY' || vType=='AP')
      amid='inputam';
    else
      amid='outputam';
    var taxcode =Fn.ToUpperCase(TaxList[i]['taxcode']);
    var _taxName=TaxList[i]['taxname'];
    _taxName=Fn.Replace(_taxName,"FULL","");
    var  fldEditable=  Fn.CBool(TaxList[i]['rateindependent']) || WhetherIncomingSupplyType();
    var varGroupName    =taxcode;
    var percentHeader="%";
    var valueHeader="Amt";
    var ITCHeader = "ITC";
    Erp.Grid.AddColumn('gridTI',{
      ColumnName:"taxcol#@rate#@" + TaxList[i]['taxcode'] +'#@' + TaxList[i]['tax_pid'] +'#@' + amid +'#@' + TaxList[i]['intrastate']+'#@' + TaxList[i]['interstate']+'#@' +  Fn.CBool(TaxList[i]['rateindependent']) +'#@' + TaxList[i]['taxgroupcode']  ,HeaderText:'%',ColumnGroupName:varGroupName, Width:30, Editable:fldEditable, Mandatory: false, DataType: 'Decimal',FooterTemplate:"<div class='rightAlign field-title'></div>"}
                      );
    Erp.Grid.AddColumn('gridTI',{
      ColumnName:"taxcol#@val#@" +TaxList[i]['taxcode']+'#@'+ TaxList[i]['tax_pid']+'#@' + amid+'#@' + TaxList[i]['intrastate']+'#@' + TaxList[i]['interstate']+'#@' +  Fn.CBool(TaxList[i]['rateindependent'])+'#@' + TaxList[i]['taxgroupcode'],HeaderText:'Amt',ColumnGroupName:varGroupName, Width:50, Editable: fldEditable, Mandatory: false, DataType: 'Decimal',ItemCss:"rightAlign",FooterTemplate:"<div class='rightAlign field-title'></div>"}
                      );
    Erp.Grid.AddColumn('gridTI',{
      ColumnName:"taxcol#@claimable#@" +TaxList[i]['taxcode'] + '#@'+ TaxList[i]['tax_pid']+'#@' + amid+'#@' + TaxList[i]['intrastate']+'#@' + TaxList[i]['interstate']+'#@' +  Fn.CBool(TaxList[i]['rateindependent'])+'#@' + TaxList[i]['taxgroupcode'],HeaderText:'ITC',ColumnGroupName:varGroupName, Width:50, Editable: fldEditable, Mandatory: false, DataType: 'Decimal',FooterTemplate:"<div class='rightAlign field-title'></div>"}
                      );
  }
  Erp.Grid.AddColumn('gridTI',{
    ColumnName:'DeleteRow',HeaderText:'',ItemTemplate:'<a onclick="delItemRow(this)" class="delRec" title="Delete" href="javascript:void(0)"></a>', Width:20, Editable: false, Mandatory: false, DataType: 'Text'}
                    );
  Erp.Grid.Refresh('gridTI');
}
function WhetherIncomingSupplyType()
{
  var modeof_t=Fn.ToLowerCase( Erp.GetFieldValue("@modeoftransactionnote"));
  return (vType=='P' || vType=='E' || ((vType=='CN' || vType=='DN') && Fn.Eq(modeof_t,"againstpurchase")) || vType=='PY'  || subvType=='AP' );
}
function HideUnhideColumns()
{
  var modeof_t=Fn.ToLowerCase( Erp.GetFieldValue("@modeoftransactionnote"));
  var trans_interstate=false;
  var trans_intrastate=false;
  if (Erp.GetFieldValue('@tbl_erp_t_supplytype')=='IES')
    trans_interstate=true;
  else
    trans_intrastate=true;
  for (var i=0; i<TaxList.length;i++)
  {
    var amid="";
    if(vType=='P' || vType=='E' ||  ((vType=='CN' || vType=='DN') && Fn.Eq(modeof_t,"againstpurchase")) || vType=='PY' || vType=='AP')
      amid='inputam';
    else
      amid='outputam';
    var taxratehidden =Fn.CBool(TaxList[i]['taxratehidden']);
    var taxvaluehidden =Fn.CBool(TaxList[i]['taxvaluehidden']);
    var _taxcode=Fn.ToUpperCase(TaxList[i]['taxcode']);
    var ratename="taxcol#@rate#@" + TaxList[i]['taxcode'] +'#@' + TaxList[i]['tax_pid'] +'#@' + amid+'#@' + TaxList[i]['intrastate']+'#@' + TaxList[i]['interstate']+'#@' +  Fn.CBool(TaxList[i]['rateindependent'])+'#@' + TaxList[i]['taxgroupcode'];
    var valname="taxcol#@val#@" + TaxList[i]['taxcode'] +'#@' + TaxList[i]['tax_pid'] +'#@' + amid+'#@' + TaxList[i]['intrastate']+'#@' + TaxList[i]['interstate']+'#@' +  Fn.CBool(TaxList[i]['rateindependent'])+'#@' + TaxList[i]['taxgroupcode'];
    var claimablename="taxcol#@claimable#@" + TaxList[i]['taxcode'] +'#@' + TaxList[i]['tax_pid'] +'#@' + amid+'#@' + TaxList[i]['intrastate']+'#@' + TaxList[i]['interstate']+'#@' +  Fn.CBool(TaxList[i]['rateindependent'])+'#@' + TaxList[i]['taxgroupcode'];
    if(vType == 'BOS')
    {
      Erp.Grid.DisplayColumn('gridTI',ratename,false);
      Erp.Grid.DisplayColumn('gridTI',valname,false);
      Erp.Grid.DisplayColumn('gridTI',claimablename,false);
    }
    else if (trans_interstate && Fn.CBool(TaxList[i]['interstate']))
    {
      Erp.Grid.DisplayColumn('gridTI',ratename,!taxratehidden);
      Erp.Grid.DisplayColumn('gridTI',valname,!taxvaluehidden);
      if (WhetherIncomingSupplyType() && vType != 'AR' && vType != 'AP'  && vType!='RV' )
        Erp.Grid.DisplayColumn('gridTI',claimablename, !taxvaluehidden);
      else
        Erp.Grid.DisplayColumn('gridTI',claimablename, false);
    }
    else if (trans_intrastate && Fn.CBool(TaxList[i]['intrastate']))
    {
      Erp.Grid.DisplayColumn('gridTI',ratename,!taxratehidden);
      Erp.Grid.DisplayColumn('gridTI',valname,!taxvaluehidden);
      if (WhetherIncomingSupplyType() && vType != 'AR' && vType != 'AP'  && vType!='RV'  )
        Erp.Grid.DisplayColumn('gridTI',claimablename, !taxvaluehidden);
      else
        Erp.Grid.DisplayColumn('gridTI',claimablename, false);
    }
    else
    {
      Erp.Grid.DisplayColumn('gridTI',ratename,false);
      Erp.Grid.DisplayColumn('gridTI',valname,false);
      Erp.Grid.DisplayColumn('gridTI',claimablename,false);
    }
  }
  Erp.Grid.DisplayColumn('gridTI','itc_elg',WhetherIncomingSupplyType());
  if(vType == 'AR' ||  vType == 'AR'  || vType=='RV' )
    Erp.Grid.DisplayColumn('gridTI','itc_elg',false);
  Erp.Grid.DisplayColumn('gridTI','taxablevalue',false);
  //(WhetherIncomingSupplyType() && vType != "P")
  Erp.Grid.DisplayColumn('gridTI','othercharge',true);
  //(WhetherIncomingSupplyType() && vType != "P")
  Erp.Grid.DisplayColumn('gridTI','amti',Fn.CBool(db_fld_17));
  //
}
function attachDocumentsChanged()
{
  if (Fn.CBool(db_fld_18))
    Erp.SetDisplay('panelDocuments',true);
  else
    Erp.SetDisplay('panelDocuments',false);
}
function TDSApplicableChanged()
{
  Erp.SetDisplay('@tds_am' ,Fn.CBool(Erp.GetFieldValue('@tbl_erp_t_istdsapplicable')));
  Erp.SetDisplay('@tdsgrossamount' ,Fn.CBool(Erp.GetFieldValue('@tbl_erp_t_istdsapplicable')));
  Erp.SetDisplay('@tdsamount' ,Fn.CBool(Erp.GetFieldValue('@tbl_erp_t_istdsapplicable')));
}
///// LOAD FUNCTION
Erp.OnLoad.Register(LoadFunction);
function LoadFunction(){
  Erp.SetEnable("@supplytype",false);
  Erp.SetDisplay("trInvisible",false);
  vType=Fn.ToUpperCase(Fn.GetProp('vtype')) ;
  subvType=Fn.ToUpperCase(Fn.GetProp('subvtype')) ;
  if(Fn.IsEmpty(subvType))
    Erp.SetFieldValue('@vt',voucherTypeID);
  else{
    Erp.SetFieldValue('@vt',subvoucherTypeID);
    vType=subvType;
  }
  if (Erp.LayoutMode=='A'){
    if(vType != 'BOS')
      Erp.SetFieldValue('@gstsupplycategory','Taxable');
    Erp.SetFieldValue('@rs','Approved');
    Erp.SetFieldValue('@dot',Fn.Today());
  }
  //  Erp.SetEnable('@vt',false);
  Erp.SetEnable('@currency',false);
  Erp.Grid.EnableGridTracking('gridTI',false);
  Erp.Grid.Serialization('gridTI',true,true);
  Erp.Grid.Serialization('gridOC',true,true);
  Erp.Grid.Serialization('gridAgainstBill',true,true);
  Erp.Grid.Serialization('dgAgainstCN',true,true);
  Erp.Grid.Serialization('dgAdvInv',true,true);
  //Erp.Grid.Serialization('dgAgainstDN',true,true);
  attachDocumentsChanged();
  TDSApplicableChanged();
  SaveCountryState();
  SaveHelperState();
  ManipulateUI();
  Togglepercentage();
  Manipulate_gridOC_Columns();
  refreshtm();
  Toggletransactiondetails();
  Erp.SetDisplay('@dot' ,(vType=='P'));
  Erp.SetDisplay('lblDot' ,(vType=='P'));
  Erp.SetParam('gridAgainstBill','partyid',Erp.GetFieldValue('@tbl_erp_t_helper_am'));
  Erp.SetParam('dgAgainstCN','partyid',Erp.GetFieldValue('@tbl_erp_t_helper_am'));
  // Erp.SetParam('gridAgainstBill','partyid',Erp.GetFieldValue('@tbl_erp_t_helper_am'));
  if(vType == 'R')
    Erp.Grid.Filter('gridAgainstBill','filter_sales',false);
  else if(vType == 'M')
  {
    Erp.Grid.Filter('gridAgainstBill','filter_matching',false);
  }
  else if(vType == 'PY')
    Erp.Grid.Filter('gridAgainstBill','Filter_payment',false);
  //Erp.SetParam('dgAgainstCN','partyid',Erp.GetFieldValue('@tbl_erp_t_helper_am'));
  Erp.SetDisplay('lblTaxISUnder' ,(vType=='S' || vType=='DC' || vType == 'PI' || vType == 'Q'   || vType == 'BOS'   || vType == 'SO'  ));
  Erp.SetDisplay('@helper_tdsamount' ,(vType=='R' || vType=='PY'));
  Erp.SetDisplay('@helper_am2' ,(vType=='R' || vType=='PY' ));
  toggleTDSAccount();
  toggleMatchingGrids(false);
  toggleTaxPaid();
  toggleEcom();
  TaxableColumnsDisplay();
  Erp.SetDisplay('lblInvoiceNo' ,(vType!='S'  && vType!='DC' && vType != 'PI' && vType != 'Q'   && vType != 'BOS'   && vType != 'SO'  ));
  Erp.SetDisplay('lblModeOfTransc' ,(vType=='CN' || vType=='DN'));
  Erp.SetDisplay('fldmodeoftransactionnote' ,(vType=='CN' || vType=='DN'));
  Erp.SetDisplay('trModeOfT' ,(vType=='CN' || vType=='DN'));
  if(vType=='P' || vType=='E'   ){
    Erp.SetDisplay('lblInvoiceNo' ,true);
    Erp.SetDisplay('@purchaseinvoiceno' ,true);
    Erp.SetLabel('lblInvoiceNo' ,"Received Invoice No");
    Erp.SetMandatory('@purchaseinvoiceno' ,true);
    Erp.SetDisplay('@purchaseinvoicedate' ,true);
    Erp.SetMandatory('@purchaseinvoicedate' ,true);
  }
  if(Erp.LayoutMode == "A"){
    Erp.SetFieldValue('@voucherdate',Fn.Now());
  }
  if (vType=='S' || subvType=='AR' || vType=='R'  || (Erp.GetFieldValue('@modeoftransactionnote')=="AgainstSales" &&  (vType=='CN' || vType=='DN')) || vType == "RV"  || vType=='DC' || vType == 'PI' || vType == 'Q'   || vType == 'BOS'   || vType == 'SO'  )
  {
    Erp.SetLabel("lblParty","Customer");
  }
  else if (vType=='P' || vType=='E' || vType=='PY' || subvType=='AP'  || (Erp.GetFieldValue('@modeoftransactionnote')=="AgainstPurchase" &&  (vType=='CN' || vType=='DN')))
  {
    Erp.SetLabel("lblParty","Vendor");
  }
  Erp.SetDisplay('lblTaxConsideration' ,(vType=='RStopped' || vType=='ARStopped'));
  Erp.SetDisplay('@taxconsideration' ,(vType=='RStopped' || vType=='ARStopped'));
  if(Erp.LayoutMode == "A")
    Erp.SetFieldValue("@taxconsideration" ,"Exclusive");
  if(vType=='PY' )
    Erp.SetParam('@helper_am2','_fc','TDSAM');
  if(Erp.LayoutMode == "A" && !Fn.IsEmpty(Fn.GetProp("_cfl")))
  {
    Erp.SetFieldValue("@siteou",Fn.GetProp("_loc"));
    Erp.SetEnable("@siteou",false);
    Erp.SetFieldValue("@helper_am",Fn.GetProp("_prty"));
    Erp.SetEnable("@helper_am",false);
    helperAMChanged();
  }
  if(vType=='CN' || vType=='DN'  )
  {
    Erp.SetDisplay("trBalances",true);
    Erp.SetDisplay("btnCrBal",true);
    Erp.SetDisplay("btnDrBal",true);
    Erp.SetDisplay("@modeoftransactionnote",true);
    Erp.SetDisplay("trModeOfT",true);
    PrevTR_Disable();
  }
  else
  {
    Erp.SetDisplay("trBalances",false);
    Erp.SetDisplay("btnCrBal",false);
    Erp.SetDisplay("btnDrBal",false);
    Erp.SetDisplay("@modeoftransactionnote",false);
    Erp.SetDisplay("trModeOfT",false);
  }
  Erp.SetDisplay("trBalances",false);
  if(Fn.IsEmpty(Erp.GetFieldValue("@previoustr")))
  {
    Erp.SetDisplay("btnCrBal",false);
    Erp.SetDisplay("btnDrBal",false);
  }
  else
  {
    Erp.SetDisplay("btnCrBal",true);
    Erp.SetDisplay("btnDrBal",true);
    fetchCrDrBalance();
  }
  hideCdNo();
  HideUnhideColumns();
  SetLabelsVoucherWise();
  if(vType =="S" || vType =="P" || vType == "E" || vType == "CN" || vType == "DN"  || vType=='DC' || vType == 'PI' || vType == 'Q'  || vType == 'BOS'    || vType == 'SO'  )
    Erp.SetMandatory('@invoicetype',true);
  else
    Erp.SetMandatory('@invoicetype',false);
  Erp.TriggerEvent('@invoicetype','change');
  Erp.SetParam('@helper_am','_showbtns','1');
  Erp.SetParam('@salesconsigneeam','_showbtns','1');
  Erp.SetParam('@exportport','_showbtns','1');
  Erp.SetParam('@exportport','Title','Export Port');
  Erp.SetParam('@importport','_showbtns','1');
  Erp.SetParam('@importport','Title','Import Port');
  Erp.SetParam('@duedatescheme','_showbtns','1');
  Erp.SetParam('@duedatescheme','Title','Due Date');
  Erp.SetParam('@taxreg','OU',Erp.GetFieldValue("@siteou"));
  Erp.SetParam('@previoustr','taxreg',Erp.GetFieldValue("@taxreg"));
  isinvoiceagainstadvance_changed();
  Erp.SetDisplay("pnlAdvanceInv",false);
  if(vType == "P" || vType == "E")
    Erp.SetButtonLabel("btnAdvInv","Advance Payment");
  
  //Erp.SetMandatory('@transactionseries',true);
  
}
function ManipulateUI()
{
  if (Erp.LayoutMode=='A')
  {
    Erp.SetDisplay('trAccountEntry',false)
    Erp.SetFieldValue('@invoicetype',RegInvoiceType);
  }
  else
  {
    Erp.SetDisplay('trAccountEntry',true)
  }
  Erp.SetDisplay('trExportDetails',false);
  Erp.SetDisplay('trImportDetails',false);
  Erp.SetDisplay('trTDS',false);
  if (vType=='P' || vType=='E' || vType=='DN' || vType=='R'    || subvType=='AR'  || vType == 'PY'  || vType=='AP'  || vType=='RV' )
  {
    Erp.SetDisplay('lblShippingTo',false);
    Erp.SetDisplay('@salesconsigneeam',false);
    if ( vType=='DN' )
    {
      Erp.SetDisplay('@previoustr',true);
      Erp.SetDisplay('@purchaseinvoiceno',false);
      Erp.SetDisplay('@purchaseinvoicedate',false);
      Erp.SetLabel('lblInvoiceNo','Previous Invoice No');
    }
    else
    {
      Erp.SetDisplay('@previoustr',false);
      if(vType == 'PY'  || vType=='AP'){
        Erp.SetDisplay('@purchaseinvoiceno',false);
        Erp.SetDisplay('@purchaseinvoicedate',false);
      }
      else
      {
        Erp.SetDisplay('@purchaseinvoiceno',true);
        Erp.SetDisplay('@purchaseinvoicedate',true);
        Erp.SetLabel('lblInvoiceNo','Invoice No');
      }
    }
    //Erp.SetDisplay('trTDS',true);
    if (vType=='R'  || subvType=='AR'  || vType=='RV' )
      Erp.SetParam('@helper_am','_fc','SalesParty');
    else if (vType=='DN'){
      if(Fn.Eq( Erp.GetFieldValue("@modeoftransactionnote"),"AgainstPurchase"))
        Erp.SetParam('@helper_am','_fc','PurchaseParty');
      else
        Erp.SetParam('@helper_am','_fc','SalesParty');
      setVoucherMode();
    }
    else
      Erp.SetParam('@helper_am','_fc','PurchaseParty');
    Erp.SetParam('@invoicetype','_fc','lu_Inward');
  }
  else if (vType=='S' || vType=='CN'  || vType=='DC' || vType == 'PI' || vType == 'Q'  || vType == 'BOS'   || vType == 'SO'   )
  {
    if ( vType=='CN')
    {
      Erp.SetDisplay('@previoustr',true);
      Erp.SetLabel('lblInvoiceNo','Previous Invoice No');
      Erp.SetDisplay('lblShippingTo',false);
      Erp.SetDisplay('@salesconsigneeam',false);
      if(Fn.Eq( Erp.GetFieldValue("@modeoftransactionnote"),"AgainstPurchase"))
        Erp.SetParam('@helper_am','_fc','PurchaseParty');
      else
        Erp.SetParam('@helper_am','_fc','SalesParty');
      setVoucherMode();
    }
    else
    {
      Erp.SetDisplay('@previoustr',false);
      Erp.SetLabel('lblInvoiceNo','Invoice No');
      Erp.SetDisplay('lblShippingTo',true);
      Erp.SetDisplay('@salesconsigneeam',true);
      Erp.SetParam('@helper_am','_fc','SalesParty');
    }
    Erp.SetDisplay('@purchaseinvoiceno',false);
    Erp.SetDisplay('@purchaseinvoicedate',false);
    Erp.SetDisplay('trTDS',false);
    Erp.SetParam('@salesconsigneeam','_fc','SalesParty');
    Erp.SetParam('@invoicetype','_fc','lu_outward');
  }
  else if (vType=='M' )
    Erp.SetParam('@helper_am','_fc','MatchingParty');
  else  if ( vType=='RV')
  {
    Erp.SetDisplay('@previoustr',true);
    Erp.SetLabel('lblInvoiceNo','Previous Invoice No');
    Erp.SetDisplay('lblShippingTo',false);
    Erp.SetDisplay('@salesconsigneeam',false);
    if(Fn.Eq( Erp.GetFieldValue("@modeoftransactionnote"),"AgainstPurchase"))
      Erp.SetParam('@helper_am','_fc','PurchaseParty');
    else
      Erp.SetParam('@helper_am','_fc','SalesParty');
    Erp.SetDisplay('@purchaseinvoiceno',false);
    Erp.SetDisplay('@purchaseinvoicedate',false);
    Erp.SetDisplay('trTDS',false);
  }
  if (vType=='P' || vType=='E' || vType=='S' || vType=='DC' || vType == 'PI' || vType == 'Q'  || vType == 'BOS'    || vType == 'SO'  )
  {
    /*if(vType=='P' || vType=='E' )
      Erp.SetDisplay('trImportDetails',true);*/
    Erp.SetDisplay('lblDueDate',true);
    Erp.SetDisplay('@duedate',true);
    Erp.SetDisplay('lblDotScheme',true);
    Erp.SetDisplay('@duedatescheme',true);
  }
  else
  {
    Erp.SetDisplay('lblDueDate',false);
    Erp.SetDisplay('@duedate',false);
    Erp.SetDisplay('lblDotScheme',false);
    Erp.SetDisplay('@duedatescheme',false);
  }
  Erp.SetDisplay('@reasonforcdn',( vType=='CN' || vType=='DN'));
  Erp.SetDisplay('lblReasonForCDN',( vType=='CN' || vType=='DN'));
  var isAdvance=Fn.CBool( Fn.GetProp('isadvance'));
  /* if(isAdvance && Erp.LayoutMode == "A"){
    Erp.SetFieldValue('@isadvance',true);
      Erp.SetDisplay('@isadvance',true); 
  }
  else
    Erp.SetDisplay('@isadvance',false);*/
  Erp.SetDisplay('@isadvance',( vType=='R'  || vType=='PY'  || subvType=='AR' || subvType=='AP' || vType=='RV'  ));
  Erp.SetDisplay('@advanceamount',( vType=='R' || vType=='PY' || subvType=='AR' || subvType=='AP' || vType=='RV' ));
  Erp.SetDisplay('trAdvance',( vType=='R' || vType=='PY' || subvType=='AR' || subvType=='AP' || vType=='RV' ));
  Erp.SetDisplay('trBankDetails',( vType=='R' || vType=='PY' || subvType=='AR' || subvType=='AP' || vType=='RV' ));
  Erp.SetDisplay('trBankDetails1',( vType=='R' || vType=='PY' || subvType=='AR' || subvType=='AP' || vType=='RV' ));
  Erp.SetDisplay('trReceiptAmt',( vType=='R' || vType=='PY' || subvType=='AR' || subvType=='AP' || vType=='RV' ));
  Erp.SetDisplay('pnlAgainstBill',( vType=='R' ||  vType=='PY' ));
  var modeof_t=Fn.ToLowerCase( Erp.GetFieldValue("@modeoftransactionnote"));
  if( vType=='R'  || vType=='S' ||  ((vType=='CN' || vType=='DN') && Fn.Eq(modeof_t,"againstsales")) || vType=='DC' || vType == 'PI' || vType == 'Q'   || vType == 'BOS'  || vType == 'SO'   )
    Erp.SetLabel('lblpay','Total Receivable');
  SetPreviousTRReference();
  ManipulateMatchingUI();
  Erp.SetDisplay('tblSupplydetails',( vType != 'PY' ));
  Erp.SetDisplay('gridTI',( vType != 'PY' ));
  if( vType=='R' || vType=='PY' || subvType=='AR' || subvType=='AP' || vType=='RV' )
  {
    Erp.SetDisplay('trTDS',false);
    IsAdvanceChecked();
  }
  if (subvType=='AR' || subvType=='AP'  || vType=='RV'  )
  {
    Erp.SetDisplay('lblShippingTo',false);
    Erp.SetDisplay('@salesconsigneeam',false);
    if(vType=='RV'){
      Erp.SetDisplay('@previoustr',true);
      Erp.SetDisplay("invDetails",true);
    }
    else
      Erp.SetDisplay('@previoustr',false);
    Erp.SetFieldValue('@isadvance',true);
    Erp.SetEnable('@isadvance',false);
    Erp.SetDisplay('lblTdsAmt',false);
    Erp.SetDisplay('lblTdsAct',false);
    if (subvType=='AR' || vType=='RV' ){
      Erp.SetLabel("lbl_bank","Received In");
      Erp.SetLabel("lblAmt","Receipt Amount");
    }
    else{
      Erp.SetFieldValue('@isreversechargeapplicable',true);
      Erp.SetEnable('@isreversechargeapplicable',false);
      Erp.SetLabel("lbl_bank","Paid In");
      Erp.SetLabel("lblAmt","Paid Amount");
    }
  }
  else
    Erp.SetDisplay("invDetails",true);
  if(vType == 'AR' ||  vType == 'AR' || vType=='RV'  )
    Erp.SetVisible("gridOC" ,  false);
  else
    Erp.SetVisible("gridOC" ,  true);
  //Fn.CBool(db_fld_19)
  if( vType=='S'  || vType=='DC' || vType == 'PI' || vType == 'Q'   || vType == 'BOS'  || vType == 'SO'   ){
    if(vType == 'BOS' )
      Erp.SetParam('@gstsupplycategory','_fc','lu_SalesCategoryBOS');
    else 
      Erp.SetParam('@gstsupplycategory','_fc','lu_SalesCategory');
    Erp.SetDisplay("@isinvoiceagainstadvance",true);
    Erp.SetDisplay("btnAdvInv",true);
    Erp.SetDisplay("trAgainstAdvance",true);
  }
  else   if( vType=='P' ){
    Erp.SetParam('@gstsupplycategory','_fc','lu_PurchaseCategory');
    Erp.SetDisplay("@isinvoiceagainstadvance",Fn.CBool(Erp.GetFieldValue("@isreversechargeapplicable")));
    Erp.SetDisplay("trAgainstAdvance",Fn.CBool(Erp.GetFieldValue("@isreversechargeapplicable")));
    Erp.SetDisplay("btnAdvInv",Fn.CBool(Erp.GetFieldValue("@isreversechargeapplicable")));
    $("#fld_advance-Ctr").find(".field-lbl").html("Is Against Advance Payment");
    $("#fld_invNo-Ctr").find(".field-lbl").html("Advance Payment No");
  }
  else{
    Erp.SetDisplay("@isinvoiceagainstadvance",false);
    Erp.SetDisplay("btnAdvInv",false);
    Erp.SetDisplay("trAgainstAdvance",false);
  }
  if(vType == "AR" || vType == "AP"  || vType == "P"  || vType=='RV' )
  {
    Erp.SetDisplay("@ecomtran",false);
    Erp.SetDisplay("@ecommerceoperatoram",false);
  }
  if(vType=='RV'){
    Erp.SetDisplay('@previoustr',true);
    Erp.SetDisplay('lblInvoiceNo',true);
    Erp.SetDisplay('@invoicetype',false);
    Erp.SetDisplay('lnlInvType',false);
    Erp.SetDisplay('@purchaseinvoiceno',false);
    Erp.SetDisplay('@purchaseinvoicedate',false);
  }
  if(vType=='DC' || vType == 'PI' || vType == 'Q'   || vType == 'BOS'  || vType == 'SO'   ){
    Erp.SetDisplay('@duedatescheme',false);
    Erp.SetDisplay('lblDotScheme',false);
    Erp.SetDisplay('@duedate',false);
    Erp.SetDisplay('lblDueDate',false);
  }
  if(vType == 'BOS' )
  {
  }
  else if(vType == 'S' )
  {
    Erp.SetFieldValue('@gstsupplycategory','Taxable','Taxable');
    Erp.SetEnable('@gstsupplycategory',false);
  }
}
function setVoucherMode()
{
  if( Fn.Eq( Fn.GetProp("_nm") ,"s"))
  {
    Erp.SetFieldValue("@modeoftransactionnote","AgainstSales");
    Erp.SetEnable("@modeoftransactionnote",false);
    Erp.SetParam('@helper_am','_fc','SalesParty');
  }
  else
  {
    Erp.SetFieldValue("@modeoftransactionnote","AgainstPurchase");
    Erp.SetEnable("@modeoftransactionnote",false);
    Erp.SetParam('@helper_am','_fc','PurchaseParty');
  }
  Erp.SetMandatory("@previoustr",true);
  SetPreviousTRReference();
}
Erp.OnLoadComplete.Register(LoadCompleteFunction);
function LoadCompleteFunction(){
  Toggle_exportdetails();
  Toggle_importdetails();
  refreshtm1();
  Toggletransactiondetails();
  TaxableColumnsDisplay();
  PrevTR_Disable();
}
function OnGridDataBoundOC(gridId,args){
  //completion all data loads events
  CalculateFooterTI('rate');
  CalculateFooterTI('');
  CalculateFooterOC('');
  FinalShowOfTotals();
  CalculateFootergridAgainstBill();
  Erp.Grid.SetFooterText('gridTI','amti',0,'Total');
  Erp.Grid.SetFooterText('gridOC','debitcredit',0,'Total');
}
function OnGridDataBoundTD(gridId,args){
  CalculateFooterAccounts('');
  Erp.Grid.SetFooterText('gridTD','debitcredit',0,'Total');
}
function GridRowDataBoundTI(gridId,args){
  var modeof_t=Fn.ToLowerCase( Erp.GetFieldValue("@modeoftransactionnote"));
  var TIId=Erp.Grid.GetRecordID('gridTI',args.row);
  for (var i=0; i<TaxList.length;i++)
  {
    var arr=Fn.Filter(TaxInfo,function(r){
      return r.ti_pid==TIId && TaxList[i]['tax_pid']==r.tax_pid;
    }
                     );
    if (arr.length>0)
    {
      var amid="";
      if(vType=='P' || vType=='E' ||  ((vType=='CN' || vType=='DN') && Fn.Eq(modeof_t,"againstpurchase")) || vType=='PY' || vType=='AP')
        amid='inputam';
      else
        amid='outputam';
      var ratename="taxcol#@rate#@" + TaxList[i]['taxcode'] +'#@' + TaxList[i]['tax_pid'] +'#@' + amid+'#@' + TaxList[i]['intrastate']+'#@' + TaxList[i]['interstate']+'#@' +  Fn.CBool(TaxList[i]['rateindependent'])+'#@' + TaxList[i]['taxgroupcode'];
      var valname="taxcol#@val#@" + TaxList[i]['taxcode'] +'#@' + TaxList[i]['tax_pid'] +'#@' + amid+'#@' + TaxList[i]['intrastate']+'#@' + TaxList[i]['interstate']+'#@' +  Fn.CBool(TaxList[i]['rateindependent'])+'#@' + TaxList[i]['taxgroupcode'];
      var claimablename="taxcol#@claimable#@" + TaxList[i]['taxcode'] +'#@' + TaxList[i]['tax_pid'] +'#@' +amid+'#@' + TaxList[i]['intrastate']+'#@' + TaxList[i]['interstate']+'#@' +  Fn.CBool(TaxList[i]['rateindependent'])+'#@' + TaxList[i]['taxgroupcode'];
      Erp.Grid.SetEditorValue('gridTI',ratename,args.row,Fn.CFlt(arr[0]['taxrate']));
      Erp.Grid.SetEditorValue('gridTI',valname,args.row,Fn.CFlt(arr[0]['taxvalue']));
      Erp.Grid.SetEditorValue('gridTI',claimablename,args.row,Fn.CFlt(arr[0]['claimabletax']));
    }
  }
}
function GridDataBoundTI(gridId,args){
  if(firstLoaded)
    return;
  firstLoaded=true;
  if (vType=='E' || vType=='P' || vType=='CN' || vType == 'R' || vType == 'AR'  || vType=='RV' )
  {
    Erp.Grid.DisplayColumn('gridOC','debitamount',true);
    Erp.Grid.DisplayColumn('gridOC','creditamount',false);
    if (vType == 'R' || vType == 'AR'  || vType=='RV' )
      Erp.Grid.Filter('gridOC','filter_OtherCharges_Receipt');
    else
      Erp.Grid.Filter('gridOC','filter_OtherCharges_Purchase');
    //Erp.SetParam('gridOC','defaultfilter','filter_OtherCharges_Purchase')
  }
  else if (vType=='S' || vType=='DN' || vType == 'PY'  || vType == 'AP'   || vType=='DC' || vType == 'PI' || vType == 'Q'   || vType == 'BOS'   || vType == 'SO'  )	
  {
    Erp.Grid.DisplayColumn('gridOC','debitamount',false);
    Erp.Grid.DisplayColumn('gridOC','creditamount',true);
    if (vType == 'PY'  || vType == 'AP')
      Erp.Grid.Filter('gridOC','Filter_OtherCharges_Payment');
    else
      Erp.Grid.Filter('gridOC','filter_OtherCharges_Sales');
    //Erp.SetParam('gridOC','defaultfilter','filter_OtherCharges_Sales')
  }
  Erp.Grid.EnableGridTracking('gridTI',true);
  CalculateFooterTI('');
  FinalShowOfTotals();
  //Erp.Grid.Refresh('gridOC');
}
function Manipulate_gridOC_Columns()
{
  if (vType=='E' || vType=='P' || vType=='CN' || vType == 'R'  || subvType=='AR' || vType == 'RV' )
  {
    Erp.Grid.DisplayColumn('gridOC','debitamount',true);
    Erp.Grid.DisplayColumn('gridOC','creditamount',false);
    if (vType == 'R')
      Erp.Grid.Filter('gridOC','filter_OtherCharges_Receipt');
    else
      Erp.Grid.Filter('gridOC','filter_OtherCharges_Purchase');
    //Erp.SetParam('gridOC','defaultfilter','filter_OtherCharges_Purchase')
  }
  else if (vType=='S' || vType=='DN' || vType == 'PY'  || subvType=='AP'  || vType=='DC'  || vType == 'PI' || vType == 'Q'   || vType == 'BOS'   || vType == 'SO'  )
  {
    Erp.Grid.DisplayColumn('gridOC','debitamount',false);
    Erp.Grid.DisplayColumn('gridOC','creditamount',true);
    if (vType == 'PY'  || subvType=='AP' )
      Erp.Grid.Filter('gridOC','Filter_OtherCharges_Payment');
    else
      Erp.Grid.Filter('gridOC','filter_OtherCharges_Sales');
    //Erp.SetParam('gridOC','defaultfilter','filter_OtherCharges_Sales')
  }
}
function CountryRateLoaded(result)
{
  // console.log("result : " + result);
  //console.log("itemrat4ecountry : " + ItemRateCountry);
  Erp.Grid.SetEditorValue('gridTI','rate',Fn.CFlt(ItemRateCountry));
  CalculateRow('item');
  ItemTaxRateLoaded();
}
function StateRateLoaded(result)
{
  // console.log("result : " + result);
  //console.log("ItemRateState : " + ItemRateState);
  Erp.Grid.SetEditorValue('gridTI','rate',Fn.CFlt(ItemRateState));
  CalculateRow('item');
  ItemTaxRateLoaded();
}
function OURateLoaded(result)
{
  //console.log("result : " + result);
  //console.log("ItemRateOU : " + ItemRateOU);
  Erp.Grid.SetEditorValue('gridTI','rate',Fn.CFlt(ItemRateOU));
  CalculateRow('item');
  ItemTaxRateLoaded();
}
var Gcrnt_row;
var GloadNext;
var Ggridlength;
function setTaxes()
{
  if(GloadTaxes){
    Ggridlength=Erp.Grid.GetRows('gridTI').length;
    GloadNext=true;
    Gcrnt_row=0;
    if(Ggridlength > 0)
      loadCorrectTax();
  }
}
function loadCorrectTax()
{
  var ITMID =Erp.Grid.GetEditorValue("gridTI","item",Gcrnt_row);
  if(!Fn.IsEmpty(ITMID)){
    Erp.SetParam(window,'ITMID',ITMID);
    Erp.LoadVariable('itemTRG',itemTRGLoaded);
  }
}
function itemTRGLoaded()
{
  Erp.SetParam(window,'TRG',itemTRG);
  Erp.LoadVariable(['ItemTaxConfig','ItemTaxRate'],ItemTaxRateLoaded);
}
function ItemTaxRateLoaded()
{
  var trans_interstate=false;
  if (Erp.GetFieldValue('@tbl_erp_t_supplytype')=='IES')
    trans_interstate=true;
  if(Erp.Grid._getGridView('gridTI') == null)
    return;
  var totcols=Erp.Grid._getGridView('gridTI').get_columns().length;
  for (var i=BeginColumns;i<totcols;i++)
  {
    var lColName=Erp.Grid._getGridView('gridTI').get_columns()[i]._data.UniqueName;
    lColName = lColName.split("!~")[1];
    if (Fn.IndexOf(lColName,'#@rate#@')>=0)
    {
      var valColName=Fn.Replace(lColName,'#@rate#@','#@val#@');
      var claimColName=Fn.Replace(lColName,'#@rate#@','#@claimable#@');
      var vtaxpid=lColName.split("#@")[3];
      var taxable=Erp.Grid.GetEditorValue('gridTI','finaltaxable',Gcrnt_row);
      var calc_tax=0;
      var rate=0;
      //loop through config// then loop through taxrates. if is country wise tax rates then match. if state wise taxrates then match.
      for (var j=0; j<ItemTaxConfig.length;j++)
      {
        if (vtaxpid==ItemTaxConfig[j]['tax_pid'])  //0=taxpid
        {
          for (var k=0; k<ItemTaxRate.length;k++)
          {
            if (vtaxpid==ItemTaxRate[k]['tax_pid'])  //2=taxpid
            {
              rate=0;
              if (Fn.CBool(ItemTaxConfig[j]['iscountrywide'])) //If IsCountryWiseTaxConfig
              {
                if (OUCountry==ItemTaxRate[k]['itemtaxcountry']) //4=Country
                {
                  if (trans_interstate && Fn.CBool(ItemTaxConfig[j]['interstate']))
                    rate=Fn.CFlt(ItemTaxRate[k]['taxrate']);
                  else if (!trans_interstate && Fn.CBool(ItemTaxConfig[j]['intrastate']))
                    rate=Fn.CFlt(ItemTaxRate[k]['taxrate']);
                  else
                    rate=0;
                }
              }
              else if (Fn.CBool(ItemTaxConfig[j]['isstatespecific']))  //If IsStateWiseTaxConfig
              {
                if (OUState==ItemTaxRate[k]['itemtaxstate']) //5=State
                {
                  if (trans_interstate && Fn.CBool(ItemTaxConfig[j]['interstate']))
                    rate=Fn.CFlt(ItemTaxRate[k]['taxrate']);
                  else if (!trans_interstate && Fn.CBool(ItemTaxConfig[j]['intrastate']))
                    rate=Fn.CFlt(ItemTaxRate[k]['taxrate']);
                  else
                    rate=0;
                }
              }
              if (!Fn.CBool(ItemTaxConfig[j]['rateindependent'])) 
              {
                Erp.Grid.SetEditorValue('gridTI',lColName,Gcrnt_row,rate);
                calc_tax=Fn.Round(Fn.CFlt(taxable)*Fn.CFlt(rate)/100,2);
                Erp.Grid.SetEditorValue('gridTI',valColName,Gcrnt_row,calc_tax);
                if (WhetherIncomingSupplyType())  // Claim only in case of P/E/DN
                  Erp.Grid.SetEditorValue('gridTI',claimColName,Gcrnt_row,calc_tax);
                else
                  Erp.Grid.SetEditorValue('gridTI',claimColName,Gcrnt_row,0);
              }
              break;
            }
          }
          break;
        }
      }
    }
  }
  if(GloadNext){
    Gcrnt_row=Gcrnt_row+1;
    if(Gcrnt_row < Ggridlength)
      loadCorrectTax(Gcrnt_row,Ggridlength);
    else
      CalculateRow('item');
  }
  else
    CalculateRow('item');
}
function CalculateRow(vcolname)
{
  CalcTotals();
  CalcTaxes();
  CalculateFooterTI(vcolname);
  CalculateFooterTI('');
  FinalShowOfTotals();
}
function GridCellChangedTI(gridId,args){
  if (args.colName=='amti')
  {
    Erp.Grid.SetEditorValue(gridId,'item','');
    //alert(1);
    //var acmaster=Erp.Grid.GetEditorValue(gridId,args.colName);
    //Erp.Grid.SetEditorValue(gridId,'accountmasterti',acmaster);	
  }
  if (args.colName=='item')
  {
    //console.log(args);
    if (Fn.CFlt(Erp.Grid.GetEditorValue(arguments[0],'qty',arguments[1].row))==0)
      Erp.Grid.SetEditorValue('gridTI','qty',1);
    //console.log("IfnUll" );
    //console.log(Fn.IfNull(args.value.Keys));
    // if (vType=="S" || vType=="CN" || (vType=="R" ))
    // {
    // if (!(Fn.IfNull(args.value.Keys) || Fn.IsEmpty(args.value.Keys)))
    {
      if (args.value.Keys.length>0)    
        Erp.Grid.SetEditorValue('gridTI','itemlinenarration',Fn.CStr(args.value.Keys[2]));
      //Dont Remove. Dont Remove.
      //documentation
      //0-hsn
      //1-sac
      //2-default line item narration
      //3-ispurchase item
      //4-issales item
      //5-muname
      //6-mucode
      //7-item nature code
      //8-is rate countrywide
      //9-is rate statewide
      //10-is rate ouwide
      //11-taxgroup id
      GloadNext=false;
      Gcrnt_row=args.row;
      if (Fn.CBool(args.value.Keys[8]))
      {
        Erp.SetParam(window,'DOR',Erp.GetFieldValue('@tbl_erp_t_dot'));
        Erp.SetParam(window,'Country',OUCountry);
        Erp.SetParam(window,'ITM',Erp.Grid.GetEditorValue(arguments[0],'item',arguments[1].row));
        Erp.SetParam(window,'TRG',args.value.Keys[11]);
        Erp.LoadVariable(['ItemRateCountry','ItemTaxConfig','ItemTaxRate'],CountryRateLoaded);
      }
      else if (Fn.CBool(args.value.Keys[9]))
      {
        Erp.SetParam(window,'DOR',Erp.GetFieldValue('@tbl_erp_t_dot'));
        Erp.SetParam(window,'RateState',OUState);
        Erp.SetParam(window,'ITM',Erp.Grid.GetEditorValue(arguments[0],'item',arguments[1].row));
        Erp.SetParam(window,'TRG',args.value.Keys[11]);
        Erp.LoadVariable(['ItemRateState','ItemTaxConfig','ItemTaxRate'],StateRateLoaded);
      }
      else if (Fn.CBool(args.value.Keys[10]))
      {
        Erp.SetParam(window,'DOR',Erp.GetFieldValue('@tbl_erp_t_dot'));
        Erp.SetParam(window,'RateOU',Erp.GetFieldValue('@tbl_erp_t_siteou'));
        Erp.SetParam(window,'ITM',Erp.Grid.GetEditorValue(arguments[0],'item',arguments[1].row));
        Erp.SetParam(window,'TRG',args.value.Keys[11]);
        Erp.LoadVariable(['ItemRateOU','ItemTaxConfig','ItemTaxRate'],OURateLoaded);
      }
      if (Fn.Eq(args.value.Keys[7] ,'CG'))
        Erp.Grid.SetEditorValue('gridTI','itc_elg','cp','cp');
      else if (Fn.Eq(args.value.Keys[7] ,'OG') || Fn.Eq(args.value.Keys[7] ,'INV'))
        Erp.Grid.SetEditorValue('gridTI','itc_elg','ip','ip');
      else if (Fn.Eq(args.value.Keys[7] ,'SER'))
        Erp.Grid.SetEditorValue('gridTI','itc_elg','is','is');
      Erp.Grid.SetEditorValue('gridTI','itmnaturecode',args.value.Keys[7]);
      // Erp.Grid.GetEditor('gridTI',"itc_elg").SetParam("goods", ( Fn.ToUpperCase( Fn.CStr(args.value.Keys[7]) )== "SER"  ? "0" : "1"));
    }
    // }
    //Erp.Grid.GetEditorValue(arguments[0],'item',arguments[1].row)
  }
  else if(args.colName=='rate' || args.colName=='ratediscount' || args.colName=='qty')
  {
    CalculateRow(args.colName);
  }
  else if(args.colName=='othercharge' )
  {
    var taxablevalue=Fn.CFlt( Erp.Grid.GetEditorValue('gridTI','taxablevalue'));
    Erp.Grid.SetEditorValue('gridTI','finaltaxable',taxablevalue+args.value);
    CalculateRow(args.colName);
    CalculateFooterTI('');
    FinalShowOfTotals();
  }
  else if(Fn.IndexOf(args.colName,"taxcol#@rate#@")>-1)
  {
    var taxrate=Erp.Grid.GetEditorValue(gridId,args.colName);
    var taxablevalue=Erp.Grid.GetEditorValue(gridId,'finaltaxable');
    var taxvalue_colname= Fn.Replace(args.colName,"#@rate#@","#@val#@");
    var claimvalue_colname= Fn.Replace(args.colName,"#@rate#@","#@claimable#@");
    var taxvalue=Fn.Round(Fn.CFlt(taxablevalue)*Fn.CFlt([taxrate])/100,2);
    Erp.Grid.SetEditorValue(gridId,taxvalue_colname,taxvalue);
    if (WhetherIncomingSupplyType())  // Claim only in case of P/E/DN
      Erp.Grid.SetEditorValue(gridId,claimvalue_colname,taxvalue);
    else
      Erp.Grid.SetEditorValue(gridId,claimvalue_colname,0);
    FinalShowOfTotals();
  }
  else if(args.colName=='itc_elg' )
  {
    CalcTaxes(args.row);
  }
  // if(Fn.IndexOf(args.colName, "taxcol#@")>-1)
  //{
  CalculateFooterTI('');
  FinalShowOfTotals();
  //}
}
function CalcTotalsAll()
{
  var gridlength=Erp.Grid.GetRows('gridTI').length;
  for(var m=0;m<gridlength;m++)
  {
    CalcTotals(m);
  }
}
function CalcTotals(c_row)
{
  if(!$("#gridTI").isVisible())    
    return;
  if(Fn.IsEmpty(c_row))
    c_row=Erp.Grid.GetSelectedRow('gridTI');
  if(c_row == null)
    return;
  var gridId='gridTI';
  var vrate=Erp.Grid.GetEditorValue(gridId,'rate',c_row);
  var vdiscountrate=Erp.Grid.GetEditorValue(gridId,'ratediscount',c_row);
  var vfinalrate=vrate-vdiscountrate;
  var vqty=Erp.Grid.GetEditorValue(gridId,'qty',c_row);
  var vtotal=Fn.CFlt(vrate*vqty);
  var vdiscount=Fn.CFlt(vdiscountrate*vqty);
  var vnettotal=Fn.CFlt(vtotal)-Fn.CFlt(vdiscount);
  var vabatement=0;
  var vtaxablevalue=vnettotal-vabatement;
  Erp.Grid.SetEditorValue(gridId,'finalrate',c_row,vfinalrate);
  Erp.Grid.SetEditorValue(gridId,'total',c_row,vtotal);
  Erp.Grid.SetEditorValue(gridId,'discount',c_row,vdiscount);
  Erp.Grid.SetEditorValue(gridId,'nettotal',c_row,vnettotal);
  Erp.Grid.SetEditorValue(gridId,'abatement',c_row,0);
  var supplyCategory=Fn.ToLowerCase( Erp.GetFieldValue('@gstsupplycategory'));
  var amt=vnettotal;
  Erp.Grid.SetEditorValue('gridTI','taxablevalue',c_row,0);
  Erp.Grid.SetEditorValue('gridTI','nilRatedAmt',c_row,0);
  Erp.Grid.SetEditorValue('gridTI','ExemptedAmt',c_row,0);
  Erp.Grid.SetEditorValue('gridTI','NonGSTAmt',c_row,0);
  Erp.Grid.SetEditorValue('gridTI','compositesupplyamount',c_row,0);
  if(supplyCategory == 'nilrated')
    Erp.Grid.SetEditorValue('gridTI','nilRatedAmt',c_row,amt);
  else if(supplyCategory == 'exempted')
    Erp.Grid.SetEditorValue('gridTI','ExemptedAmt',c_row,amt);
  else if(supplyCategory == 'nongst')
    Erp.Grid.SetEditorValue('gridTI','NonGSTAmt',c_row,amt);
  else if(supplyCategory == 'compositesupply')
    Erp.Grid.SetEditorValue('gridTI','compositesupplyamount',c_row,amt);
  var abatement=Fn.CFlt(Erp.Grid.GetEditorValue('gridTI','abatement',c_row));
  var nilRatedAmt=Fn.CFlt(Erp.Grid.GetEditorValue('gridTI','nilRatedAmt',c_row));
  var ExemptedAmt=Fn.CFlt(Erp.Grid.GetEditorValue('gridTI','ExemptedAmt',c_row));
  var NonGSTAmt=Fn.CFlt(Erp.Grid.GetEditorValue('gridTI','NonGSTAmt',c_row));
  var compositesupplyamount=Fn.CFlt(Erp.Grid.GetEditorValue('gridTI','compositesupplyamount',c_row));
  var taxablevalue=amt-abatement-nilRatedAmt-ExemptedAmt-NonGSTAmt-compositesupplyamount;
  var reverseAmt=1;
  Erp.Grid.SetEditorValue('gridTI','taxablevalue',c_row,taxablevalue*reverseAmt);
  var othercharge=Fn.CFlt( Erp.Grid.GetEditorValue('gridTI','othercharge',c_row));
  Erp.Grid.SetEditorValue('gridTI','finaltaxable',c_row,(taxablevalue*reverseAmt)+othercharge);
  // Erp.Grid.SetEditorValue(gridId,'taxablevalue',vtaxablevalue);
}
function FinalShowOfTotals()
{
  var netTotal=Erp.Grid.CalculateColumn('gridTI','nettotal','SUM');
  Erp.SetLabel('lblTotalAmount',Fn.Round(netTotal,2));
  if(Erp.Grid._getGridView('gridTI') == null)
    return;
  var totcols=Erp.Grid._getGridView('gridTI').get_columns().length;
  var taxTotal=0;
  for (var i=BeginColumns;i<totcols;i++)
  {
    var lColName=Erp.Grid._getGridView('gridTI').get_columns()[i]._data.UniqueName;
    lColName = lColName.split("!~")[1];
    if (Fn.IndexOf(lColName,'#@val#@')>=0 && Fn.IndexOf(Fn.ToUpperCase( lColName),'FULLGST') <= 0)
    {
      taxTotal+=Erp.Grid.CalculateColumn('gridTI',lColName,'SUM');
    }
  }
  var totOC_debit = Erp.Grid.CalculateColumn('gridOC','debitamount','SUM');
  var totOC_credit =Erp.Grid.CalculateColumn('gridOC','creditamount','SUM');
  Erp.SetLabel('lblTotalOtherCharges',Fn.Round(totOC_debit+totOC_credit,2));
  if(Fn.CBool(Erp.GetFieldValue("@isreversechargeapplicable")))
  {
    Erp.SetDisplay("trRCM",true);
    Erp.SetLabel('lblRCMTaxes',Fn.Round(taxTotal,2));
    Erp.SetLabel('lblTotalTaxes',0);
    Erp.SetLabel('lblTotalPayable',Fn.Round(netTotal+totOC_debit+totOC_credit,2));
  }
  else{
    Erp.SetLabel('lblTotalTaxes',Fn.Round(taxTotal,2));
    Erp.SetLabel('lblRCMTaxes',0);
    Erp.SetDisplay("trRCM",false);
    Erp.SetLabel('lblTotalPayable',Fn.Round(netTotal+taxTotal+totOC_debit+totOC_credit,2));
  }
}
function CalcTaxes(c_row)
{
  if(Fn.IsEmpty(c_row))
    c_row=Erp.Grid.GetSelectedRow('gridTI');
  if(Erp.Grid._getGridView('gridTI') == null || c_row == null)
    return;
  var noTax=false;
  if((vType == "AR"  || vType=='RV'  ) && Fn.CBool(Erp.GetFieldValue("@isreversechargeapplicable")))
    noTax=true;
  var totcols=Erp.Grid._getGridView('gridTI').get_columns().length;
  for (var i=BeginColumns;i<totcols;i++)
  {
    var lColName=Erp.Grid._getGridView('gridTI').get_columns()[i]._data.UniqueName;
    lColName = lColName.split("!~")[1];
    if (Fn.IndexOf(lColName,'#@rate#@')>=0)
    {
      var valColName=Fn.Replace(lColName,'#@rate#@','#@val#@');
      var claimColName=Fn.Replace(lColName,'#@rate#@','#@claimable#@');
      var rateColName=lColName;
      var rateindependent=Fn.CBool(lColName.split("#@")[7]);
      var itc_elg=Erp.Grid.GetEditorValue('gridTI','itc_elg',c_row);
      if(noTax)
        Erp.Grid.SetEditorValue('gridTI',rateColName,c_row,0);
      if(!rateindependent){
        var taxable=Erp.Grid.GetEditorValue('gridTI','finaltaxable',c_row);
        var rate=Erp.Grid.GetEditorValue('gridTI',lColName,c_row);
        var calc_tax=0  ;
        if(!noTax)
          calc_tax=Fn.Round(Fn.CFlt(taxable)*Fn.CFlt(rate)/100,2);
        Erp.Grid.SetEditorValue('gridTI',valColName,c_row,calc_tax);
        if (WhetherIncomingSupplyType())  // Claim only in case of P/E/DN          
        {
          if(Fn.Eq(itc_elg,'no'))
            Erp.Grid.SetEditorValue('gridTI',claimColName,c_row,0);
          else
            Erp.Grid.SetEditorValue('gridTI',claimColName,c_row,calc_tax);
        }
        else
          Erp.Grid.SetEditorValue('gridTI',claimColName,c_row,0);
      }
      else
      {
        if(Fn.Eq(itc_elg,'no') || noTax)
          Erp.Grid.SetEditorValue('gridTI',claimColName,c_row,0);
      }
    }
  }
}
function CalcTaxesAll()
{
  if(Erp.Grid._getGridView('gridTI') == null)
    return;
  var totcols=Erp.Grid._getGridView('gridTI').get_columns().length;
  var gridlength=Erp.Grid.GetRows('gridTI').length;
  for(var m=0;m<gridlength;m++)
  {
    CalcTaxes(m);
  }
}
function GridCellChangedOC(gridId,args){
  DistributeOC();
  CalculateFooterOC('');
  CalculateFooterTI();
  FinalShowOfTotals();
  if (args.colName=='am')
  {
    if (args.value.Keys.length>0)  {
      //isgstapplicable
      //isapportionate_cg
      //isapportionate_og
      //isapportionate_inv
      //isapportionate_ser
      var typeCol="";
      typeCol =Fn.CBool(args.value.Keys[0])+'|';
      typeCol =typeCol+Fn.CBool(args.value.Keys[1])+'|';
      typeCol =typeCol+Fn.CBool(args.value.Keys[2])+'|';
      typeCol =typeCol+Fn.CBool(args.value.Keys[3])+'|';
      typeCol =typeCol+Fn.CBool(args.value.Keys[4]);
      Erp.Grid.SetEditorValue(gridId,'amnature',args.row,typeCol);
    }
  }
}
function GridOCRowAddingOC(gridId,args){
  if (vType=='P' || vType=='E' || vType=='CN' || vType == 'R'  || subvType=='AR' || vType=='RV' )
    Erp.Grid.SetEditorValue(gridId,'debitcredit','D');
  else if (vType=='S' || vType=='DN' || vType=='PY'  || subvType=='AP'  || vType=='DC' || vType == 'PI' || vType == 'Q'   || vType == 'BOS'   || vType == 'SO'  )
    Erp.Grid.SetEditorValue(gridId,'debitcredit','C');
}
function GridCellEditingTI(gridId,args){
  var modeof_t=Fn.ToLowerCase( Erp.GetFieldValue("@modeoftransactionnote"));
  if (args.colName=='item')
  {
    if (vType=="E" || vType=="P" ||  ((vType=='CN' || vType=='DN') && Fn.Eq(modeof_t,"againstpurchase")) || vType=="AP" || vType=="PY")
      args.editor.SetParam('_fc','ForPurchaseAM');
    else if (vType=="S" || ((vType=='CN' || vType=='DN') && Fn.Eq(modeof_t,"againstsales")) || vType=="R" || vType=="AR"  || vType=='RV'  || vType=='DC' || vType == 'PI' || vType == 'Q'   || vType == 'BOS'  || vType == 'SO'   )
      args.editor.SetParam('_fc','ForSalesAM');
    // args.editor.SetParam('AM',Erp.Grid.GetEditorValue(arguments[0],'amti',arguments[1].row));
    if (vType=='P' || vType=='E' || ((vType=='CN' || vType=='DN') && Fn.Eq(modeof_t,"againstpurchase")) || vType=='PY'  || subvType=='AP' )
      args.editor.SetParam('AM',PurchaseAccount);
    else if (vType=='S' || ((vType=='CN' || vType=='DN') && Fn.Eq(modeof_t,"againstsales")) || vType == 'R' || vType == 'AR'  || vType=='DC' || vType == 'PI' || vType == 'Q'   || vType == 'BOS'   || vType == 'SO'  )
      args.editor.SetParam('AM',SalesAccount);
  }
  else if (args.colName=='amti')
  {
    if (vType=="E")
      args.editor.SetParam('_fc','ExpenseAM');
    else if (vType=="P" ||  ((vType=='CN' || vType=='DN') && Fn.Eq(modeof_t,"againstpurchase")))
      args.editor.SetParam('_fc','PurchaseAM');
    else if (vType=="S" || ((vType=='CN' || vType=='DN') && Fn.Eq(modeof_t,"againstsales"))  || vType=='DC' || vType == 'PI' || vType == 'Q'   || vType == 'BOS'   || vType == 'SO'  )
      args.editor.SetParam('_fc','SalesAM');
  }
}
function delItemRow(a)
{
  if (confirm('Do you want to delete this line?'))
  {
    Erp.Grid.DeleteRow('gridTI',a,true);
    CalculateFooterTI('qty');
    CalculateFooterTI('');
    FinalShowOfTotals();
    DistributeOC();
  }
}
function delOCRow(a)
{
  if (confirm('Do you want to delete this line?'))
  {
    Erp.Grid.DeleteRow('gridOC',a,true);
    CalculateFooterOC('');
    FinalShowOfTotals();
    DistributeOC();
  }
}
function delAdvInvRow(a)
{
  if (confirm('Do you want to delete this line?'))
  {
    Erp.Grid.DeleteRow('dgAdvInv',a,true);
    CalculateColFooter_Adv();
  }
}
function validateGridTI()
{
  if (Fn.IsEmpty(Erp.GetFieldValue('@tbl_erp_t_supplytype')))
  {
    Erp.ShowMessage('Supply type can not be left blank');
    return false;
  }
  if ( Fn.IsEmpty(Erp.GetFieldValue('@tbl_erp_t_pos')))
  {
    if(vType== "R" ){
      if( Fn.CBool(Erp.GetFieldValue('@tbl_erp_t_isadvance')) ){
        Erp.ShowMessage('POS (Point of Supply) can not be left blank');
        return false;
      }
    }
    else{
      Erp.ShowMessage('POS (Point of Supply) can not be left blank');
      return false;
    }
  }
  var trans_interstate=false;
  if (Erp.GetFieldValue('@tbl_erp_t_supplytype')=='IES')
    trans_interstate=true;
  if(Erp.Grid._getGridView('gridTI') == null)
    return;
  var totcols=Erp.Grid._getGridView('gridTI').get_columns().length;
  var totrows=Erp.Grid.GetRows('gridTI').length;
  for (var r=0;r<totrows;r++)
  {
    var taxable=Erp.Grid.GetEditorValue('gridTI','taxablevalue',r);
    var vrate=Fn.CFlt(Erp.Grid.GetEditorValue('gridTI','rate',r));
    var vdiscountrate=Fn.CFlt(Erp.Grid.GetEditorValue('gridTI','ratediscount',r));
    if (vrate<0)
    {
      Erp.ShowMessage('Rate can not be less than 0. Please check line no. ' + (r+1));
      return false;
    }
    if (vdiscountrate<0)
    {
      Erp.ShowMessage('Discount rate can not be negative. Please check line no. ' + (r+1));
      return false;
    }
    if (vdiscountrate>vrate)
    {
      Erp.ShowMessage('Discount can not be more the rate. Please check line no. ' + (r+1));
      return false;
    }
    for (var i=BeginColumns;i<totcols;i++)
    {
      var lColName=Erp.Grid._getGridView('gridTI').get_columns()[i]._data.UniqueName;
      lColName = lColName.split("!~")[1];
      if (Fn.IndexOf(lColName,'#@rate#@')>=0)
      {
        var valColName=Fn.Replace(lColName,'#@rate#@','#@val#@');
        var claimColName=Fn.Replace(lColName,'#@rate#@','#@claimable#@');
        var vtaxpid=lColName.split("#@")[3];
        var vtaxcode=lColName.split("#@")[2];
        var vintrastate=Fn.CBool(lColName.split("#@")[5]);
        var vinterstate=Fn.CBool(lColName.split("#@")[6]);
        var vtaxrate=Fn.CFlt(Erp.Grid.GetEditorValue('gridTI',lColName,r));
        var vtax=Fn.CFlt(Erp.Grid.GetEditorValue('gridTI',valColName,r));
        var vtaxclaim=Fn.CFlt(Erp.Grid.GetEditorValue('gridTI',claimColName,r));
        if (vtaxrate<0)
        {
          Erp.ShowMessage( vtaxcode + ' Rate can not be less than zero. Please check line no. ' + (r+1));
          return false;
        }
        if (vtax<0)
        {
          Erp.ShowMessage( vtaxcode + ' value can not be less than zero. Please check line no. ' + (r+1));
          return false;
        }
        if (vtaxclaim<0)
        {
          Erp.ShowMessage( vtaxcode + ' claim value can not be less than zero. Please check line no. ' + (r+1));
          return false;
        }
        if (trans_interstate==true)
        {
          if (vinterstate==false && vtaxrate!=0)
          {
            Erp.ShowMessage('Supply Type is Inter State but ' + vtaxcode + ' rate is specified. Please check line no. ' + (r+1));
            return false;
          }
          if (vinterstate==false && vtax!=0)
          {
            Erp.ShowMessage('Supply Type is Inter State but ' + vtaxcode + ' value is specified. Please check line no. ' + (r+1));
            return false;
          }
          if (vinterstate==false && vtaxclaim!=0)
          {
            Erp.ShowMessage('Supply Type is Inter State but ' + vtaxcode + ' claim value is specified. Please check line no. ' + (r+1));
            return false;
          }
        }
        if (trans_interstate==false)
        {
          if (vintrastate==false && vtaxrate!=0)
          {
            Erp.ShowMessage('Supply Type is Intra State but ' + vtaxcode + ' rate is specified. Please check line no. ' + (r+1));
            return false;
          }
          if (vintrastate==false && vtax!=0)
          {
            Erp.ShowMessage('Supply Type is Intra State but ' + vtaxcode + ' value is specified. Please check line no. ' + (r+1));
            return false;
          }
          if (vintrastate==false && vtaxclaim!=0)
          {
            Erp.ShowMessage('Supply Type is Intra State but ' + vtaxcode + ' claim value is specified. Please check line no. ' + (r+1));
            return false;
          }
        }
        if (vtaxclaim>vtax)
        {
          Erp.ShowMessage('Tax Claim can not be more than Tax. Please check ' + vtaxcode + '  in line no. ' + (r+1));
          return false;
        }
        if (!(WhetherIncomingSupplyType()))
        {
          if (vtaxclaim>0)
          {
            Erp.ShowMessage('Tax Claim can not be more 0 in case of vouchers other than Purchase / Expense / Debit Notes (Purchase) / Credit Notes (Purchase). Please check ' + vtaxcode + '  in line no. ' + (r+1));
            return false;
          }
        }
      }
    }
  }
  return true;
}
Erp.OnSave.Register(SaveFunction);
function SaveFunction(){
  if (validateGridTI()==false)
  {
    return false;
  }
  if(!validateGUIControls())
  {
    return false;
  }
  if(Fn.CBool(Erp.GetFieldValue('@tbl_erp_t_istdsapplicable')))
  {
    if (Fn.IsEmpty(Erp.GetFieldValue('@tbl_erp_t_tds_am')))
    {
      Erp.ShowMessage('Please choose TDS Section','alert');
      return false;
    }
    if (Fn.IsEmpty(Erp.GetFieldValue('@tbl_erp_t_tdsgrossamount')))
    {
      Erp.ShowMessage('Please input TDS Gross Amount','alert');
      return false;
    }
    if (Fn.IsEmpty(Erp.GetFieldValue('@tbl_erp_t_tdsamount')))
    {
      Erp.ShowMessage('Please input TDS Amount','alert');
      return false;
    }
  }
  if (Fn.CFlt(Erp.GetFieldValue('@tbl_erp_t_advanceamount'))!=0 && (vType == 'R' || vType == 'PY'  || subvType=='AP'  || subvType=='AR'  || vType=='RV' )) 
  {
    if (Fn.CBool(Erp.GetFieldValue('@tbl_erp_t_isadvance'))==false)
    {
      Erp.ShowMessage("Please check 'Is Advance' and input item details for the advance amount of " + Erp.GetFieldValue('@tbl_erp_t_advanceamount'));
      return false;
    }
  }
  if (vType == 'M') 
  {
    var AgainstBill=Erp.Grid.CalculateColumn('gridAgainstBill','receiptamount','SUM');
    var AgainstCN=Erp.Grid.CalculateColumn('dgAgainstCN','receiptamount','SUM');
    if (AgainstBill != AgainstCN)
    {
      /* Erp.ShowMessage(" Amount adjusted against bill  ["+AgainstBill+"] should match with amount adjusted against credit note and advances ["+AgainstCN + "] " );
      return false;*/
    }
  }
  if (Fn.IsEmpty( Erp.GetFieldValue("@previoustr")) && (vType == 'CN' || vType == 'DN')) 
  {
    Erp.ShowMessage("Please Select Previous Invoice No ");
    return false;
  }
  if(db_fld_1=="Cash")
  {
    Erp.SetFieldValue('@helper_tmreferenceno','');
    Erp.SetFieldValue('@helper_chequedate','');
    Erp.SetFieldValue('@helper_chequedrawnon','');
  }
  if(!Fn.CBool(Erp.GetFieldValue('@tbl_erp_t_ecomtran')))
  {
    Erp.SetFieldValue('@ecommerceoperatoram','');
  }
  Erp.SetFieldValue('@dot',Erp.GetFieldValue('@tbl_erp_t_voucherdate'));
  return true;
}
Erp.OnSaveSuccess.Register(SaveSuccessFunction);
function SaveSuccessFunction(){
  Erp.Grid.SaveChanges('gridDocs');
}
function CalculateFooterAccounts()
{
  CalculateColFooter('gridTD','debitamount');
  CalculateColFooter('gridTD','creditamount');
}
function CalculateFooterOC(colname)
{
  CalculateColFooter('gridOC','debitamount');
  CalculateColFooter('gridOC','creditamount');
}
function CalculateFooterTI(colname)
{
  // if (Fn.IndexOf(colname,'rate')>=0 || Fn.IndexOf(colname,'ratediscount')>=0 || Fn.IndexOf(colname,'qty')>=0)
  // {
  CalculateColFooter('gridTI','total');
  CalculateColFooter('gridTI','discount');
  CalculateColFooter('gridTI','nettotal');
  CalculateColFooter('gridTI','abatement');
  CalculateColFooter('gridTI','taxablevalue');
  // }
  if (Fn.IndexOf(colname,'abatement')>0)
  {
    CalculateColFooter('gridTI','taxablevalue');
    CalculateColFooter('gridTI','finaltaxable');
  }
  else if (Fn.IsEmpty(colname))
  {
    if(Erp.Grid._getGridView('gridTI') == null)
      return;
    var totcols=Erp.Grid._getGridView('gridTI').get_columns().length;
    for (var i=BeginColumns;i<totcols;i++)
    {
      var lColName=Erp.Grid._getGridView('gridTI').get_columns()[i]._data.UniqueName
      if (Fn.IndexOf(lColName,'#@val#@')>=0 || Fn.IndexOf(lColName,'#@claimable#@')>=0)
      {
        CalculateColFooter('gridTI',i);
      }
    }
  }
  CalculateColFooter('gridTI','othercharge');
  CalculateColFooter('gridTI','finaltaxable');
}
function CalculateColFooter(gridid,colname)
{
  var Total=Fn.Round(Erp.Grid.CalculateColumn(gridid,colname,'SUM'),2);
  Erp.Grid.SetFooterText(gridid,colname,0,Total);
}
function showacdetails()
{
  Erp.OpenPopup('actab',{
    showClose:true,autoClose: false}
               );
  return false;
}
function GridCellChangedgridAgainstBill(gridId,args){
  CalculateFootergridAgainstBill();
  if(args.colName=='receiptamount')
  {
    var receiptamount=Erp.GetFieldValue('@tbl_erp_t_helper_amount1');
    var gridreceiptamount=Erp.Grid.CalculateColumn('gridAgainstBill','receiptamount','SUM');
    Erp.SetFieldValue('@advanceamount',Fn.Round(Fn.CFlt(receiptamount)-Fn.CFlt(gridreceiptamount),2));
    Erp.SetEnable('@advanceamount',false);
  }
  else  if(args.colName=='paymentamount')
  {
    var receiptamount=Erp.GetFieldValue('@tbl_erp_t_helper_amount1');
    var gridreceiptamount=Erp.Grid.CalculateColumn('gridAgainstBill','paymentamount','SUM');
    Erp.SetFieldValue('@advanceamount',Fn.Round(Fn.CFlt(receiptamount)-Fn.CFlt(gridreceiptamount),2));
    Erp.SetEnable('@advanceamount',false);
  }
  else  if(args.colName=='addamount')
  {
    CalculateNewBalance();
  }
}
function OnCellValidating(gridId,args){
  /*if(args.colName=='receiptamount'){
    if(Fn.CFlt(Erp.Grid.GetEditorValue(arguments[0],'receiptamount',arguments[1].row)) >  Fn.CFlt( Erp.Grid.GetEditorValue(gridId,'balanceamount', args.row)))
    {
      //Erp.Grid.RaiseError('gridAgainstBill','receiptamount','This is an error message');
      return 'Receipt amount should be less than balance amount';
    }
  }*/
}
function OnCellValidating_gridTI(gridId,args){
  if(args.colName=='rate'){
    if(Fn.CFlt(args.value) < 0 )
    {
      return 'Rate should not be negative';
    }
  }
}
function CalculateFootergridAgainstBill()
{
  CalculateColFooter('gridAgainstBill','totaldebits');
  CalculateColFooter('gridAgainstBill','totalcredits');
  CalculateColFooter('gridAgainstBill','debitbalance');
  CalculateColFooter('gridAgainstBill','creditbalance');
  CalculateColFooter('gridAgainstBill','addamount');
  CalculateColFooter('gridAgainstBill','newbalance');
  CalculateColFooter('gridAgainstBill','reduceamount');
  CalculateColFooter('gridAgainstBill','paymentamount');
  CalculateColFooter('gridAgainstBill','receiptamount');
  CalculateColFooter('gridAgainstBill','TDSReceivable');
}
function setadvanceamt()
{
  if(vType == 'R' ){
    var receiptamount=Erp.GetFieldValue('@tbl_erp_t_helper_amount1');
    DistributeAmountInGrid('gridAgainstBill',receiptamount,'debitbalance','receiptamount',true);
    CalculateFootergridAgainstBill();
    var gridreceiptamount=Erp.Grid.CalculateColumn('gridAgainstBill','receiptamount','SUM');
    Erp.SetFieldValue('@advanceamount',Fn.Round(Fn.CFlt(receiptamount)-Fn.CFlt(gridreceiptamount),2));
    Erp.SetEnable('@advanceamount',false);
  }
  else if(vType == 'PY'){
    var receiptamount=Erp.GetFieldValue('@tbl_erp_t_helper_amount1');
    DistributeAmountInGrid('gridAgainstBill',receiptamount,'creditbalance','paymentamount',true);
    CalculateFootergridAgainstBill();
    var gridreceiptamount=Erp.Grid.CalculateColumn('gridAgainstBill','paymentamount','SUM');
    Erp.SetFieldValue('@advanceamount',Fn.Round(Fn.CFlt(receiptamount)-Fn.CFlt(gridreceiptamount),2));
    Erp.SetEnable('@advanceamount',false);
  }
  else if(vType == 'AR'  || vType == 'AP'  || vType=='RV' ){
    var receiptamount=Erp.GetFieldValue('@tbl_erp_t_helper_amount1');
    Erp.SetFieldValue('@advanceamount',Fn.Round(receiptamount,2));
    Erp.SetEnable('@advanceamount',false);
  }
}
function GSC_Changed(){
  DistributeOC();
  var supplyCategory=Fn.ToLowerCase( Erp.GetFieldValue('@gstsupplycategory'));
  var gridTiRowsLength=Erp.Grid.GetRows('gridTI').length;
  for(var t=0;t<gridTiRowsLength;t++)
  {
    var amt=Fn.CFlt(Erp.Grid.GetEditorValue('gridTI','nettotal',t));
    Erp.Grid.SetEditorValue('gridTI','taxablevalue',t,0);
    Erp.Grid.SetEditorValue('gridTI','nilRatedAmt',t,0);
    Erp.Grid.SetEditorValue('gridTI','ExemptedAmt',t,0);
    Erp.Grid.SetEditorValue('gridTI','NonGSTAmt',t,0);
    Erp.Grid.SetEditorValue('gridTI','compositesupplyamount',t,0);
    if(supplyCategory == 'nilrated')
      Erp.Grid.SetEditorValue('gridTI','nilRatedAmt',t,amt);
    else if(supplyCategory == 'exempted')
      Erp.Grid.SetEditorValue('gridTI','ExemptedAmt',t,amt);
    else if(supplyCategory == 'nongst')
      Erp.Grid.SetEditorValue('gridTI','NonGSTAmt',t,amt);
    else if(supplyCategory == 'compositesupply')
      Erp.Grid.SetEditorValue('gridTI','compositesupplyamount',t,amt);
    var abatement=Fn.CFlt(Erp.Grid.GetEditorValue('gridTI','abatement',t));
    var nilRatedAmt=Fn.CFlt(Erp.Grid.GetEditorValue('gridTI','nilRatedAmt',t));
    var ExemptedAmt=Fn.CFlt(Erp.Grid.GetEditorValue('gridTI','ExemptedAmt',t));
    var NonGSTAmt=Fn.CFlt(Erp.Grid.GetEditorValue('gridTI','NonGSTAmt',t));
    var compositesupplyamount=Fn.CFlt(Erp.Grid.GetEditorValue('gridTI','compositesupplyamount',t));
    var taxablevalue=amt-abatement-nilRatedAmt-ExemptedAmt-NonGSTAmt-compositesupplyamount;
    Erp.Grid.SetEditorValue('gridTI','taxablevalue',t,taxablevalue);
    var othercharge=Fn.CFlt( Erp.Grid.GetEditorValue('gridTI','othercharge',t));
    Erp.Grid.SetEditorValue('gridTI','finaltaxable',t,taxablevalue+othercharge);
  }
  TaxableColumnsDisplay();
  GloadTaxes=true;
  setTaxes();
  CalcTaxesAll();
  CalculateFooterTI('qty');
  CalculateFooterTI('');
  FinalShowOfTotals();
  setTransType();
}
function TaxableColumnsDisplay()
{
  //var supplyCategory=Fn.ToLowerCase( Erp.GetFieldValue('@gstsupplycategory'));
  //Erp.Grid.DisplayColumn('gridTI','taxablevalue',supplyCategory == 'taxable');
  //Erp.Grid.DisplayColumn('gridTI','nilRatedAmt',supplyCategory == 'nilrated');
  //Erp.Grid.DisplayColumn('gridTI','ExemptedAmt',supplyCategory == 'exempted');
  //Erp.Grid.DisplayColumn('gridTI','NonGSTAmt',supplyCategory == 'nongst');
  //For the time being since other charges is kept hidden then no need of taxable
  Erp.Grid.DisplayColumn('gridTI','taxablevalue',false);
  Erp.Grid.DisplayColumn('gridTI','nilRatedAmt',false);
  Erp.Grid.DisplayColumn('gridTI','ExemptedAmt',false);
  Erp.Grid.DisplayColumn('gridTI','NonGSTAmt',false);
  Erp.Grid.DisplayColumn('gridTI','compositesupplyamount',false);
}
function toggleTDSAccount()
{
  if(vType == 'R' || vType == 'PY'){
    if(Fn.CFlt(Erp.GetFieldValue('@tbl_erp_t_helper_tdsamount')) > 0)
      Erp.SetDisplay('@helper_am2',true);
    else
      Erp.SetDisplay('@helper_am2',false);
    /*DistributeAmountInGrid('gridAgainstBill',Erp.GetFieldValue('@tbl_erp_t_helper_tdsamount'),'balanceamount','receiptamount');
    CalculateFootergridAgainstBill();*/
  }
}
function ManipulateMatchingUI(){
  if(vType == 'M'){
    Erp.SetLabel('lblVType','Type');
    Erp.SetLabel('lblVoucherDate','Date');
    Erp.SetDisplay('lblVNumber',false);
    Erp.SetDisplay('@vnumber',false);
    Erp.SetDisplay('lblDueDate',false);
    Erp.SetDisplay('@duedate',false);
    Erp.SetDisplay('lblShippingTo',false);
    Erp.SetDisplay('@salesconsigneeam',false);
    Erp.SetDisplay('lblInvoiceNo',false);
    Erp.SetDisplay('@purchaseinvoiceno',false);
    Erp.SetDisplay('@purchaseinvoicedate',false);
    Erp.SetDisplay('@previoustr',false);
    Erp.SetDisplay('pnlOtherCharges',false);
    Erp.SetDisplay('pnlnarration',false);
    Erp.SetDisplay('pnlAgainstCN',true);
    Erp.SetParam('@helper_am','_fc','MatchingParty');
    Erp.SetDisplay('pnlAgainstBill',true);
    Erp.SetDisplay('pnlItemDetails',false);
    Erp.Grid.DisplayColumn('gridAgainstBill','TDSReceivable',false);
    Erp.Grid.DisplayColumn('dgAgainstCN','TDSReceivable',false);
    Erp.Grid.DisplayColumn('gridAgainstBill','distribute',true);
    Erp.SetDisplay('panelDocuments',false);
    Erp.SetDisplay('@attachdocuments',false);
    //Erp.SetDisplay('pnlAgainstDN',true);
  }
  else
  {
    //  Erp.SetDisplay('pnlAgainstDN',false);
    Erp.Grid.DisplayColumn('gridAgainstBill','distribute',false);
    Erp.Grid.DisplayColumn('gridAgainstBill',0,false);
    Erp.SetDisplay('pnlAgainstCN',false);
  }
}
function CalculateFootergridAgainstCN()
{
  CalculateColFooter('dgAgainstCN','billamount');
  CalculateColFooter('dgAgainstCN','balanceamount');
  CalculateColFooter('dgAgainstCN','receiptamount');
  CalculateColFooter('dgAgainstCN','TDSReceivable');
  CalculateColFooter('dgAgainstCN','paymentamount');
  CalculateColFooter('dgAgainstCN','creditbalance');
  CalculateColFooter('dgAgainstCN','debitbalance');
}
function OnGridDataBound_AgainstCN(gridId,args){
  CalculateFootergridAgainstCN();
  SetDistribute();
}
function OnGridDataBound_AgainstBill(gridId,args){
  CalculateFootergridAgainstBill();
  CalculateNewBalance();
}
function GridCellChangeddgAgainstCN(gridId,args){
  if(args.colName=='receiptamount')
  {
    CalculateFootergridAgainstCN();
  }
  else if(args.colName=='distribute')
  {
    if(vType == 'M'){
      var debitbalance=Fn.CFlt(Erp.Grid.GetEditorValue(gridId,'debitbalance',args.row) )  ;
      var creditbalance=Fn.CFlt(Erp.Grid.GetEditorValue(gridId,'creditbalance',args.row) )  ;
      var amtDistribute=0;
      if(Fn.CBool(Erp.Grid.GetEditorValue(gridId,'distribute',args.row) )){
        if(debitbalance > 0 )
          amtDistribute=debitbalance;
        else
          amtDistribute=creditbalance;
      }
      Erp.Grid.SetEditorValue(gridId,'receiptamount',args.row,amtDistribute);
      DistributeAmoutRowWise();
    }
  }
}
function distributeReceiptAmount(rcpAmt,row,debitcredit)
{
  var amtDistributed=0;
  var agCode =Fn.ToLowerCase(db_fld_21);
  if(vType == 'M'){
    var gridID='gridAgainstBill';
    var rowCount=Erp.Grid.GetRows(gridID).length;
    for(var i=0;i<rowCount ; i++)
    {
      if(rcpAmt == 0 )
        break;
      var debitbalance=Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'debitbalance',i) )  ;
      var creditbalance=Fn.CFlt( Erp.Grid.GetEditorValue(gridID,'creditbalance',i) )  ;
      var newbalance=Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'newbalance',i) )  ;
      var addamount=Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'addamount',i) )  ;
      var reduceamount=Fn.CFlt( Erp.Grid.GetEditorValue(gridID,'reduceamount',i) )  ;
      var amtToCompare=debitbalance;
      if(agCode == "sc")
        amtToCompare=creditbalance;
      if(debitcredit == "D")
      {
        if(amtToCompare != addamount)
        {
          amtToCompare=amtToCompare-addamount;
          if(amtToCompare <= rcpAmt){
            Erp.Grid.SetEditorValue(gridID,'addamount',i,addamount+ amtToCompare);
            rcpAmt=rcpAmt-amtToCompare;
            amtDistributed=amtDistributed+amtToCompare;
            addamount=Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'addamount',i) )  ;
            debitbalance=Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'debitbalance',i) )  ;
            Erp.Grid.SetEditorValue(gridID,'newbalance',i,debitbalance+addamount);
          }
          else if(amtToCompare >= rcpAmt)
          {
            Erp.Grid.SetEditorValue(gridID,'addamount',i,addamount+rcpAmt);
            amtDistributed=amtDistributed+rcpAmt;
            rcpAmt=0;
            addamount=Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'addamount',i) )  ;
            debitbalance=Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'debitbalance',i) )  ;
            Erp.Grid.SetEditorValue(gridID,'newbalance',i,debitbalance+addamount);
          }
        }
      }
      else
      {
        newbalance=newbalance-reduceamount;
        if(newbalance <= rcpAmt){
          Erp.Grid.SetEditorValue(gridID,'reduceamount',i,reduceamount+ newbalance);
          rcpAmt=rcpAmt-newbalance;
          amtDistributed=amtDistributed+newbalance;
        }
        else if(newbalance >= rcpAmt)
        {
          Erp.Grid.SetEditorValue(gridID,'reduceamount',i,reduceamount+rcpAmt);
          amtDistributed=amtDistributed+rcpAmt;
          rcpAmt=0;
        }
      }
    }
    Erp.Grid.SetEditorValue('dgAgainstCN','receiptamount',row,amtDistributed);
    //CalculateFootergridAgainstCN();
  }
}
function DistributeAmoutRowWise(){
  ResetAgainstGridAmounts();
  var gridID='dgAgainstCN';
  var rowCount=Erp.Grid.GetRows(gridID).length;
  var agCode =Fn.ToLowerCase(db_fld_21);
  for(var i=0;i<rowCount ; i++)
  {
    var row= i;
    if(Fn.CBool(Erp.Grid.GetEditorValue(gridID,'distribute',row) ))
    {
      var debitbalance =Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'debitbalance',i));
      var creditbalance =Fn.CFlt( Erp.Grid.GetEditorValue(gridID,'creditbalance',i));
      var amtDistribute=0;
      var debitcredit='D';
      if(debitbalance > 0)
      {
        amtDistribute = debitbalance;
        debitcredit="D";
      }
      else {
        amtDistribute = creditbalance;
        debitcredit="C";
      }
      distributeReceiptAmount(amtDistribute,row,debitcredit);
    }
    else
      Erp.Grid.SetEditorValue(gridID,'receiptamount',row,0);
  }
  //CalculateFootergridAgainstBill();
  // CalculateFootergridAgainstCN();
}
function ResetAgainstGridAmounts()
{
  var gridID='gridAgainstBill';
  var rowCount=Erp.Grid.GetRows(gridID).length;
  for(var i=0;i<rowCount ; i++)
  {
    var debitbalance =Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'debitbalance',i));
    var creditbalance =Fn.CFlt( Erp.Grid.GetEditorValue(gridID,'creditbalance',i));
    Erp.Grid.SetEditorValue(gridID,'addamount',i,0);
    // Erp.Grid.SetEditorValue(gridID,'newbalance',i,debitbalance);
    Erp.Grid.SetEditorValue(gridID,'reduceamount',i,0);
  }
  CalculateNewBalance();
}
function OnCellValidating1(gridId,args){
  if(args.colName=='receiptamount'){
    /*if(Fn.CFlt(Erp.Grid.GetEditorValue(arguments[0],'receiptamount',arguments[1].row)) >  Fn.CFlt( Erp.Grid.GetEditorValue(gridId,'balanceamount', args.row)))
    {
      //Erp.Grid.RaiseError('gridAgainstBill','receiptamount','This is an error message');
      return 'Receipt amount should be less than balance amount';
    }*/
  }
}
function DistributeAmountInGrid(gridID,amtToDistribute,colToCompare,colToDistribute,isReset)
{
  if(isReset)
    ResetGridAmounts(gridID,colToDistribute);
  var rowCount=Erp.Grid.GetRows(gridID).length;
  for(var i=0;i<rowCount ; i++)
  {
    var row= i;
    if(amtToDistribute <= 0)
      break;
    var amtToCompare=Fn.CFlt(Erp.Grid.GetEditorValue(gridID,colToCompare,row) )  ;
    if(amtToCompare <= amtToDistribute){
      Erp.Grid.SetEditorValue(gridID,colToDistribute,i,amtToCompare);
      amtToDistribute=amtToDistribute-amtToCompare;
    }
    else if(amtToCompare >= amtToDistribute)
    {
      Erp.Grid.SetEditorValue(gridID,colToDistribute,i,amtToDistribute);
      amtToDistribute=0;
    }
  }
}
function ResetGridAmounts(gridID,colToDistribute)
{
  var rowCount=Erp.Grid.GetRows(gridID).length;
  for(var i=0;i<rowCount ; i++)
  {
    Erp.Grid.SetEditorValue(gridID,colToDistribute,i,0);
  }
}
function toggleMatchingGrids(isLoad)
{
  if(vType == "M" || vType == "R" || vType == "PY")
  {
    var agCode =Fn.ToLowerCase(db_fld_21);
    if(agCode == "sd" || vType == "R")
    {
      if(isLoad)
        Erp.Grid.Refresh('gridAgainstBill');
      Erp.Grid.DisplayColumn('gridAgainstBill','totaldebits',true);
      Erp.Grid.DisplayColumn('gridAgainstBill','debitbalance',true);
      Erp.Grid.DisplayColumn('gridAgainstBill','totalcredits',false);
      Erp.Grid.DisplayColumn('gridAgainstBill','creditbalance',false);
    }
    else if(agCode == "sc" || vType == "PY")
    {
      if(Erp.LayoutMode == "E" || isLoad){
        Erp.Grid.Refresh('gridAgainstBill');
      }
      Erp.Grid.DisplayColumn('gridAgainstBill','totaldebits',false);
      Erp.Grid.DisplayColumn('gridAgainstBill','debitbalance',false);
      Erp.Grid.DisplayColumn('gridAgainstBill','totalcredits',true);
      Erp.Grid.DisplayColumn('gridAgainstBill','creditbalance',true);
    }
    if(vType == "M" ){
      if(Erp.LayoutMode == "E" || isLoad){
        Erp.Grid.Refresh('gridAgainstBill');
        Erp.Grid.Refresh('dgAgainstCN');
      }
      Erp.SetDisplay("pnlAgainstBill",true);
      Erp.SetDisplay("pnlAgainstCN",true);
    }
    if( vType == "R")
    {
      if(Erp.LayoutMode == "E" || isLoad)
        Erp.Grid.Refresh('gridAgainstBill');
      Erp.Grid.DisplayColumn('gridAgainstBill','addamount',false);
      Erp.Grid.DisplayColumn('gridAgainstBill','newbalance',false);
      Erp.Grid.DisplayColumn('gridAgainstBill','reduceamount',false);
      Erp.Grid.DisplayColumn('gridAgainstBill','receiptamount',true);
    }
    else if(vType == "PY")
    {
      if(Erp.LayoutMode == "E" || isLoad){
        Erp.Grid.Refresh('gridAgainstBill');
      }
      Erp.Grid.DisplayColumn('gridAgainstBill','addamount',false);
      Erp.Grid.DisplayColumn('gridAgainstBill','newbalance',false);
      Erp.Grid.DisplayColumn('gridAgainstBill','reduceamount',false);
      Erp.Grid.DisplayColumn('gridAgainstBill','paymentamount',true);
    }
  }
  else
  {
    Erp.SetDisplay("pnlAgainstCN",false);
  }
}
function CalculateNewBalance()
{
  var rowCount=Erp.Grid.GetRows('gridAgainstBill').length;
  var agCode =Fn.ToLowerCase(db_fld_21);
  for(var i=0;i<rowCount ; i++)
  {
    var addamount =Fn.CFlt(Erp.Grid.GetEditorValue('gridAgainstBill','addamount',i));
    var amt=0;
    var dcamt=0;
    if(agCode == "sd"){
      amt =Fn.CFlt(Erp.Grid.GetEditorValue('gridAgainstBill','totaldebits',i));
      dcamt= Fn.CFlt(Erp.Grid.GetEditorValue('gridAgainstBill','debitbalance',i));
    }
    else{
      amt =Fn.CFlt(Erp.Grid.GetEditorValue('gridAgainstBill','totalcredits',i));
      dcamt= Fn.CFlt(Erp.Grid.GetEditorValue('gridAgainstBill','creditbalance',i));
    }
    Erp.Grid.SetEditorValue('gridAgainstBill','newbalance',i,(addamount+dcamt))
  }
}
function  SetDistribute()
{
  var rowCount=Erp.Grid.GetRows('dgAgainstCN').length;
  var agCode =Fn.ToLowerCase(db_fld_21);
  for(var i=0;i<rowCount ; i++)
  {
    var receiptamount =Fn.CFlt(Erp.Grid.GetEditorValue('dgAgainstCN','receiptamount',i));
    if(receiptamount > 0)
      Erp.Grid.SetEditorValue('dgAgainstCN','distribute',i,true);
    else
      Erp.Grid.SetEditorValue('dgAgainstCN','distribute',i,false);
  }
}
function validateGUIControls()
{
  if( vType == "P" )
  {
    if(Fn.IsEmpty( db_fld_0) && !Erp.GetFieldValue('@tbl_erp_t_isreversechargeapplicable')){
      Erp.ShowMessage("Since GSTIN of this vendor is not available, You should mark this transaction for Reverse Charge.");
      return false;
    }
    else
      Erp.HideMessage();
  }
  if(Fn.IsEmpty(Erp.GetFieldValue('@helper_am1'))  && (vType == "PY" || vType == "R"))
  {
    Erp.ShowMessage('Please select Bank');
    return false;
  }
  if(Fn.IsEmpty(Erp.GetFieldValue('@helper_tm'))  && (vType == "PY" || vType == "R"))
  {
    Erp.ShowMessage('Please select Transfer mode');
    return false;
  }
  if(Fn.IsEmpty(Erp.GetFieldValue('@helper_am2')) && Fn.CFlt(Erp.GetFieldValue('@tbl_erp_t_helper_tdsamount')) > 0  && (vType == "PY" || vType == "R"))
  {
    Erp.ShowMessage('Please select TDS Account');
    return false;
  }
  if(vType == "S" || vType == "P"  || vType=='DC' || vType == 'PI' || vType == 'Q'  || vType == 'BOS'   || vType == 'SO'   ){
    if(Fn.IsEmpty(Erp.GetFieldValue('@supplytype')))
    {
      Erp.ShowMessage('Please Select Supply Type');
      return false;
    }
    if(Fn.IsEmpty(Erp.GetFieldValue('@pos')))
    {
      Erp.ShowMessage('Please Select POS');
      return false;
    }
    if(Fn.IsEmpty(Erp.GetFieldValue('@gstsupplycategory')))
    {
      Erp.ShowMessage('Please Select Supply Category');
      return false;
    }
  }
  if(vType == "PY")
  {
    var gridID="gridAgainstBill";
    var rowCount=Erp.Grid.GetRows(gridID).length;
    var error=false;
    for(var i=0;i<rowCount ; i++)
    {
      var creditbalance =Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'creditbalance',i));
      var paymentamount =Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'paymentamount',i));
      var TDSReceivable =Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'TDSReceivable',i));
      if((paymentamount+TDSReceivable) > creditbalance)
      {
        error =true;
        break;
      }
    }
    if(error){
      Erp.ShowMessage('Payment amount  + Tds Deducted is greater than credit balance ');
      return false;
    }
    var helper_amount1=Fn.CFlt(Erp.GetFieldValue('@helper_amount1'));
    var paymentamount=Erp.Grid.CalculateColumn(gridID,'paymentamount','SUM');
    var TDSReceivable=Erp.Grid.CalculateColumn(gridID,'TDSReceivable','SUM');
    var helper_tdsamount=Fn.CFlt(Erp.GetFieldValue('@helper_tdsamount'));
    var advanceamount=Fn.CFlt(Erp.GetFieldValue('@advanceamount'));
    if(helper_tdsamount != TDSReceivable)
    {
      Erp.ShowMessage('TDS Amount not equal to   tds distributed in grid ');
      return false;
    }
    if(helper_amount1 != (paymentamount+advanceamount))
    {
      Erp.ShowMessage('Amount not equal to  paymentamount+advanceamount ');
      return false;
    }
  }
  if(vType == "R" )
  {
    var gridID="gridAgainstBill";
    var rowCount=Erp.Grid.GetRows(gridID).length;
    var error=false;
    for(var i=0;i<rowCount ; i++)
    {
      var debitbalance =Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'debitbalance',i));
      var receiptamount =Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'receiptamount',i));
      var TDSReceivable =Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'TDSReceivable',i));
      if((receiptamount+TDSReceivable) > debitbalance)
      {
        error =true;
        break;
      }
    }
    if(error){
      Erp.ShowMessage('receiptamount  + Tds Deducted is greater than debitbalance ');
      return false;
    }
    var helper_amount1=Fn.CFlt(Erp.GetFieldValue('@helper_amount1'));
    var receiptamount=Erp.Grid.CalculateColumn(gridID,'receiptamount','SUM');
    var TDSReceivable=Erp.Grid.CalculateColumn(gridID,'TDSReceivable','SUM');
    var helper_tdsamount=Fn.CFlt(Erp.GetFieldValue('@helper_tdsamount'));
    var advanceamount=Fn.CFlt(Erp.GetFieldValue('@advanceamount'));
    if(helper_tdsamount != TDSReceivable)
    {
      Erp.ShowMessage('TDS Amount not equal to   tds distributed in grid ');
      return false;
    }
    if(helper_amount1 != (receiptamount+advanceamount))
    {
      Erp.ShowMessage('Amount not equal to  receiptamount+advanceamount ');
      return false;
    }
  }
  if(vType == "M")
  {
    var agCode =Fn.ToLowerCase(db_fld_21);
    var error=false;
    var msg='';
    var gridID="dgAgainstCN";
    var rowCount=Erp.Grid.GetRows(gridID).length;
    for(var i=0;i<rowCount ; i++)
    {
      var debitbalance =Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'debitbalance',i));
      var receiptamount =Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'receiptamount',i));
      var creditbalance =Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'creditbalance',i));
      if((receiptamount) > (debitbalance+creditbalance))
      {
        error =true;
        if(debitbalance > 0)
          msg="receiptamount is greater than debitbalance";
        else
          msg="receiptamount is greater than creditbalance";
        break;
      }
    }
    if(error){
      Erp.ShowMessage(msg);
      return false;
    }
    error=false;
    gridID="gridAgainstBill";
    rowCount=Erp.Grid.GetRows(gridID).length;
    for(var i=0;i<rowCount ; i++)
    {
      var reduceamount =Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'reduceamount',i));
      var newbalance =Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'newbalance',i));
      if(reduceamount > newbalance)
      {
        error =true;
        break;
      }
    }
    if(error){
      Erp.ShowMessage('reduceamount is greater than newbalance ');
      return false;
    }
    var receiptamount=Erp.Grid.CalculateColumn('dgAgainstCN','receiptamount','SUM');
    var addamount=Erp.Grid.CalculateColumn('gridAgainstBill','addamount','SUM');
    var reduceamount=Erp.Grid.CalculateColumn('gridAgainstBill','reduceamount','SUM');
    if(receiptamount != (addamount+reduceamount))
    {
      Erp.ShowMessage('receiptamount not equal to   addamount+reduceamount ');
      return false;
    }
  }
  var totOC_debit = Fn.CFlt( Erp.Grid.CalculateColumn('gridOC','debitamount','SUM'));
  var totOC_credit = Fn.CFlt( Erp.Grid.CalculateColumn('gridOC','creditamount','SUM'));
  var totOC_ti = Fn.CFlt( Erp.Grid.CalculateColumn('gridTI','othercharge','SUM'));
  if( totOC_ti > (totOC_debit+totOC_credit))
  {
    Erp.ShowMessage("'Other Charges Taxable' can not be more than 'Other Charges' ");
    return false;
  }
  return true;
}
function toggleTaxPaid()
{
}
function toggleEcom()
{
  Erp.SetDisplay("@ecommerceoperatoram",Erp.GetFieldValue('@tbl_erp_t_ecomtran'));
  Erp.SetMandatory("@ecommerceoperatoram",Fn.CBool(Erp.GetFieldValue('@tbl_erp_t_ecomtran')));
}
function modeOfTransaction_Changed(elem,data,field)
{
}
var loadPrevTr=false;
function previoustr_change(elem,data,field)
{
  PrevTR_Disable();
  Erp.SetFieldValue('@supplytype',db_fld_28,db_fld_29);
  Erp.SetFieldValue('@pos',db_fld_30);
  Erp.SetFieldValue('@gstsupplycategory',db_fld_31);
  Erp.SetFieldValue('@invoicetype',db_fld_32);
  Erp.SetFieldValue('@ecomtran',db_fld_33);
  Erp.SetFieldValue('@ecommerceoperatoram',db_fld_34);
  Erp.SetFieldValue('@isreversechargeapplicable',db_fld_35);
  
  Erp.SetFieldValue('@defaulttransactionbank',db_fld_36);
  if(vType == 'RV')
  {
    Erp.SetFieldValue('@helper_am1',db_fld_37);
    Erp.SetFieldValue('@helper_tm',db_fld_38);
    Erp.SetFieldValue('@helper_chequedrawnon',db_fld_39);
    Erp.SetFieldValue('@helper_chequedate',db_fld_40);
    Erp.SetFieldValue('@helper_tmreferenceno',db_fld_41);
    Erp.SetFieldValue('@advanceamount',db_fld_42);
    Erp.SetFieldValue('@helper_amount1',db_fld_43);
    Toggletransactiondetails();
  }
  loadPrevTr=true;
  toggleEcom();
  Erp.TriggerEvent('@invoicetype','change',InvoiceTypeChanged);
  /*  if(Fn.IsEmpty(Erp.GetFieldValue("@previoustr")))
  {
    Erp.SetDisplay("btnCrBal",false);
         Erp.SetDisplay("btnDrBal",false);
  }
  else
  {
    Erp.SetDisplay("btnCrBal",true);
         Erp.SetDisplay("btnDrBal",true);
  }*/
  // fetchCrDrBalance();
}
function duedatescheme_change(elem,data,field)
{
  if (data!=null && data.Keys != undefined)
    if (data.Keys.length>0){
      var noOfDays=Fn.CInt(data.Keys[0]);
      var vtDate=Fn.CDate( Erp.GetFieldValue("@voucherdate"));
      var newdate = new Date(vtDate);
      newdate.setDate(vtDate.getDate() + noOfDays);
      Erp.SetFieldValue("@duedate",newdate);
    }
}
function deleteAllGridRows(gridId){
  Erp.Grid.DataBind(gridId,[]);
  Erp.Grid.DeleteRow(gridId,0,true);
}
var abcd=0
function setItemDataToGrid()
{
  Erp.LoadVariable(['prevTr_Ti','prevTr_TaxInfo','prevTr_OtherInfo'], loadprevtr_ti);
}
function loadprevtr_ti(){
  var gridId='gridTI';
  deleteAllGridRows(gridId);
  if(prevTr_Ti.length <= 0){
    var newrow1=   Erp.Grid.AddNewRow(gridId);
  }
  for (var i=0; i<prevTr_Ti.length;i++)
  {
    var newrow=   Erp.Grid.AddNewRow(gridId);
    Erp.Grid.SetEditorValue(gridId,'amti',newrow,Fn.CStr(prevTr_Ti[i]['am_pid']),Fn.CStr(prevTr_Ti[i]['amname']));
    Erp.Grid.SetEditorValue(gridId,'item',newrow,Fn.CStr(prevTr_Ti[i]['item_pid']),Fn.CStr(prevTr_Ti[i]['itemname']));
    Erp.Grid.SetEditorValue(gridId,'rate',newrow,Fn.CFlt(prevTr_Ti[i]['rate']));
    Erp.Grid.SetEditorValue(gridId,'ratediscount',newrow,Fn.CFlt(prevTr_Ti[i]['ratediscount']));
    Erp.Grid.SetEditorValue(gridId,'finalrate',newrow,Fn.CFlt(prevTr_Ti[i]['finalrate']));
    Erp.Grid.SetEditorValue(gridId,'qty',newrow,Fn.CFlt(prevTr_Ti[i]['qty']));
    Erp.Grid.SetEditorValue(gridId,'total',newrow,Fn.CFlt(prevTr_Ti[i]['total']));
    Erp.Grid.SetEditorValue(gridId,'discount',newrow,Fn.CFlt(prevTr_Ti[i]['discount']));
    Erp.Grid.SetEditorValue(gridId,'nettotal',newrow,Fn.CFlt(prevTr_Ti[i]['nettotal']));
    Erp.Grid.SetEditorValue(gridId,'abatement',newrow,Fn.CFlt(prevTr_Ti[i]['abatement']));
    Erp.Grid.SetEditorValue(gridId,'nilRatedAmt',newrow,Fn.CFlt(prevTr_Ti[i]['nilratedamt']));
    Erp.Grid.SetEditorValue(gridId,'ExemptedAmt',newrow,Fn.CFlt(prevTr_Ti[i]['exemptedamt']));
    Erp.Grid.SetEditorValue(gridId,'NonGSTAmt',newrow,Fn.CFlt(prevTr_Ti[i]['nongstamt']));
    Erp.Grid.SetEditorValue(gridId,'compositesupplyamount',newrow,Fn.CFlt(prevTr_Ti[i]['compositesupplyamount']));
    Erp.Grid.SetEditorValue(gridId,'taxablevalue',newrow,Fn.CFlt(prevTr_Ti[i]['taxablevalue']));
    Erp.Grid.SetEditorValue(gridId,'othercharge',newrow,Fn.CFlt(prevTr_Ti[i]['otherchargestaxable']));
    Erp.Grid.SetEditorValue(gridId,'finaltaxable',newrow,Fn.CFlt(prevTr_Ti[i]['finaltaxablevalue']));
    Erp.Grid.SetEditorValue(gridId,'itemlinenarration',newrow,Fn.CStr(prevTr_Ti[i]['itemlinenarration']));
    Erp.Grid.SetEditorValue(gridId,'itc_elg',newrow,Fn.CStr(prevTr_Ti[i]['eligibility_pid']),Fn.CStr(prevTr_Ti[i]['eligibility_pid']));
    Erp.Grid.SetEditorValue(gridId,'itmnaturecode',newrow,Fn.CStr(prevTr_Ti[i]['itemnaturecode']));
    var ti_pid=Fn.CStr(prevTr_Ti[i]['ti_pid']);
    setTaxDataToGrid(ti_pid,newrow)
  }
  setOtherInfoFromTr();
  loadPrevTr=false;
}
function setOtherInfoFromTr()
{
  console.log("bjbjk");
  var gridId= "gridOC";
  deleteAllGridRows(gridId);
  var tscnmode=Fn.ToLowerCase( Erp.GetFieldValue('@modeoftransactionnote'));
  if(prevTr_OtherInfo.length <= 0){
    var newrow1=   Erp.Grid.AddNewRow(gridId);
    return;
  }
  for (var i=0; i<prevTr_OtherInfo.length;i++)
  {
    var newrow=   Erp.Grid.AddNewRow(gridId);
    Erp.Grid.SetEditorValue(gridId,'am',newrow,Fn.CStr(prevTr_OtherInfo[i]['am_pid']),Fn.CStr(prevTr_OtherInfo[i]['amname']));
    Erp.Grid.SetEditorValue(gridId,'debitcredit',newrow,Fn.CStr(prevTr_OtherInfo[i]['debitcredit']),Fn.CStr(prevTr_OtherInfo[i]['debitcredit']));
    if(Fn.CFlt(prevTr_OtherInfo[i]['debitamount']) > 0)
      Erp.Grid.SetEditorValue(gridId,'debitamount',newrow,Fn.CFlt(prevTr_OtherInfo[i]['debitamount']));
    if(Fn.CFlt(prevTr_OtherInfo[i]['creditamount']) > 0)
      Erp.Grid.SetEditorValue(gridId,'debitamount',newrow,Fn.CFlt(prevTr_OtherInfo[i]['creditamount']));
    var _bits=Fn.CBool(prevTr_OtherInfo[i]['gst']) +'|'+Fn.CBool(prevTr_OtherInfo[i]['cg'])+'|'+Fn.CBool(prevTr_OtherInfo[i]['og'])+'|'+Fn.CBool(prevTr_OtherInfo[i]['inv'])+'|'+Fn.CBool(prevTr_OtherInfo[i]['ser']);
    Erp.Grid.SetEditorValue(gridId,'amnature',newrow,_bits);
  }
}
function setTaxDataToGrid(TIId,newrow)
{
  var modeof_t=Fn.ToLowerCase( Erp.GetFieldValue("@modeoftransactionnote"));
  for (var i=0; i<TaxList.length;i++)
  {
    var arr=Fn.Filter(prevTr_TaxInfo,function(r){
      return r.ti_pid==TIId && TaxList[i]['tax_pid']==r.tax_pid;
    }
                     );
    if (arr.length>0)
    {
      var amid="";
      if(vType=='P' || vType=='E' ||  ((vType=='CN' || vType=='DN') && Fn.Eq(modeof_t,"againstpurchase")) || vType=='PY' || vType=='AP')
        amid='inputam';
      else
        amid='outputam';
      var ratename="taxcol#@rate#@" + TaxList[i]['taxcode'] +'#@' + TaxList[i]['tax_pid'] +'#@' + amid+'#@' + TaxList[i]['intrastate']+'#@' + TaxList[i]['interstate']+'#@' +  Fn.CBool(TaxList[i]['rateindependent'])+'#@' + TaxList[i]['taxgroupcode'];
      var valname="taxcol#@val#@" + TaxList[i]['taxcode'] +'#@' + TaxList[i]['tax_pid'] +'#@' + amid+'#@' + TaxList[i]['intrastate']+'#@' + TaxList[i]['interstate']+'#@' +  Fn.CBool(TaxList[i]['rateindependent'])+'#@' + TaxList[i]['taxgroupcode'];
      var claimablename="taxcol#@claimable#@" + TaxList[i]['taxcode'] +'#@' + TaxList[i]['tax_pid'] +'#@' + amid+'#@' + TaxList[i]['intrastate']+'#@' + TaxList[i]['interstate']+'#@' +  Fn.CBool(TaxList[i]['rateindependent'])+'#@' + TaxList[i]['taxgroupcode'];
      Erp.Grid.SetEditorValue('gridTI',ratename,newrow,Fn.CFlt(arr[0]['taxrate']));
      Erp.Grid.SetEditorValue('gridTI',valname,newrow,Fn.CFlt(arr[0]['taxvalue']));
      Erp.Grid.SetEditorValue('gridTI',claimablename,newrow,Fn.CFlt(arr[0]['claimabletax']));
    }
  }
}
function fetchCrDrBalance()
{
  Erp.ServerCommand('CrDrBalance',{
  }
                    ,function(cmd){
                    }
                   );
}
function openMatchingLayout()
{
  Erp.OpenWindow({
    "Action":"ADDFORM","Entity":"tbl_ERP_t","Form":"ExpenseWithItem","Refresh":false,"Global":false,"Title":"Transaction Matching","Params":"vtype=M&_cfl=note&_loc="+Erp.GetFieldValue("@siteou")+"&_prty="+Erp.GetFieldValue("@helper_am"),"Location":"New"}
                );
}
function hideCdNo()
{
  if(vType == "CN" || vType == "DN")
  {
    if(Fn.Eq( Erp.GetFieldValue("@modeoftransactionnote"),"AgainstPurchase"))
    {
      Erp.SetDisplay("@purchasecdnumber",true);
      Erp.SetDisplay("lblCdNo",true);
      Erp.SetMandatory("@purchasecdnumber",true);
      Erp.SetDisplay("@purchasecddate",true);
      Erp.SetMandatory("@purchasecddate",true);
    }
    else
    {
      Erp.SetDisplay("@purchasecdnumber",false);
      Erp.SetDisplay("lblCdNo",false);
      Erp.SetMandatory("@purchasecdnumber",false);
      Erp.SetDisplay("@purchasecddate",false);
      Erp.SetMandatory("@purchasecddate",false);
    }
    if(vType == "DN")
      Erp.SetLabel('lblCdNo','Received Credit Note No');
    else if (vType == "CN")
      Erp.SetLabel('lblCdNo','Received Debit Note No');
  }
  else{
    Erp.SetDisplay("@purchasecdnumber",false);
    Erp.SetDisplay("@purchasecddate",false);
    Erp.SetDisplay("lblCdNo",false);
  }
}
function SetLabelsVoucherWise()
{
  if(vType == "S"  || vType=='DC' || vType == 'PI' || vType == 'Q'   || vType == 'BOS'   || vType == 'SO'  )
    Erp.SetDisplay("lblVNumber","Sales Invoice Number");
}
function dgTiRowAdding(gridId,args){
  var modeof_t=Fn.ToLowerCase( Erp.GetFieldValue("@modeoftransactionnote"));
  if (vType=='P' || vType=='E' || ((vType=='CN' || vType=='DN') && Fn.Eq(modeof_t,"againstpurchase")) || vType=='PY'  || subvType=='AP' )
    Erp.Grid.SetEditorValue(gridId,'amti',PurchaseAccount);
  else if (vType=='S' || ((vType=='CN' || vType=='DN') && Fn.Eq(modeof_t,"againstsales")) || vType == 'R'  || subvType=='AR'  || vType=='DC' || vType == 'PI' || vType == 'Q'   || vType == 'BOS'   || vType == 'SO'  )
    Erp.Grid.SetEditorValue(gridId,'amti',SalesAccount);
}
function InvoiceTypeChanged(elem,data,field)
{
  var inward=Fn.CBool(db_fld_44);
  var outward=Fn.CBool(db_fld_45);
  if(inward && outward)
  {
    Toggle_importdetails();
    Toggle_exportdetails();
  }
  else if(inward)
    Toggle_importdetails();
  else if(outward)
    Toggle_exportdetails();
  ChangeSupplyType();
  setTransType();
}
function taxreg_changed(elem,data,field)
{
  Erp.SetParam('@previoustr','taxreg',Erp.GetFieldValue("@taxreg"));
  Erp.SetFieldValue("@previoustr","");
  if( WhetherIncomingSupplyType())
    Erp.SetFieldValue('@pos',db_fld_9);
  else
    Erp.SetFieldValue('@pos',helper_OUState);
  SaveCountryState();
  ChangeSupplyType();
  LoadTaxList();
  
  Erp.SetFieldValue('@transactionseries','');
  Erp.SetParam('@transactionseries','taxreg',Erp.GetFieldValue("@taxreg"));
}
function PrevTR_Disable()
{
  if((vType == 'RV' ||  vType == 'CN' ||  vType == 'DN' ) 	){
    Erp.SetEnable('@supplytype',false);
    Erp.SetEnable('@pos',false);
    Erp.SetEnable('@gstsupplycategory',false);
    Erp.SetEnable('@invoicetype',false);
    Erp.SetEnable('@ecomtran',false);
    Erp.SetEnable('@ecommerceoperatoram',false);
    Erp.SetEnable('@isreversechargeapplicable',false);
     Erp.SetEnable('@defaulttransactionbank',false);
    if(vType == 'RV')
    {
      Erp.SetEnable('@helper_am1',false);
      Erp.SetEnable('@helper_tm',false);
      Erp.SetEnable('@helper_chequedrawnon',false);
      Erp.SetEnable('@helper_chequedate',false);
      Erp.SetEnable('@helper_tmreferenceno',false);
      Erp.SetEnable('@advanceamount',false);
      Erp.SetEnable('@helper_amount1',false);
      Erp.SetEnable('gridTI',false);
    }
  }
}
function setTransType()
{
  var gstin=Fn.CStr(db_fld_0);
  var supplyType=Erp.GetFieldValue("@supplytype");
  var invCode=db_fld_4;
  var gstsupplycategory=Erp.GetFieldValue("@gstsupplycategory");
  var amount= Fn.CFlt(Erp.GetLabel("lblTotalAmount"));
  var transType="";
  if(!Fn.IsEmpty(gstin))
    transType="B2B";
  else if(Fn.Eq(supplyType,"inter-state") && amount >= 250000 )
    transType="B2CL";
  else 
  {
    if(Fn.Eq(invCode ,"DE")  || Fn.Eq(invCode ,"WPAY")  || Fn.Eq(invCode ,"WOPAY")) 
      transType="EXP";
    else if( Fn.Eq(invCode ,"IMPG")  || Fn.Eq(invCode ,"IMPS") )
      transType=invCode;
    else if(gstsupplycategory != "Taxable")
      transType="NIL";
    else
      transType="B2CS";
  }
  $("#PageTitle").find(".transtype").remove();
  $("#PageTitle").find("._t").after($("<span class='transtype'> { "+transType+" } </span>"))
}
function POS_Changed()
{
  //taxLoaded=false;
  ChangeSupplyType();
  LoadTaxList();
  setTransType();
}
function isinvoiceagainstadvance_changed()
{
  if(vType == "S" || vType == "P"  || vType=='DC' || vType == 'PI' || vType == 'Q'   || vType == 'BOS'  || vType == 'SO'   ){
    var isinvoiceagainstadvance=Fn.CBool(Erp.GetFieldValue("@isinvoiceagainstadvance"));
    Erp.SetDisplay("btnAdvInv",isinvoiceagainstadvance);
    if(isinvoiceagainstadvance){
      Erp.SetParam('dgAdvInv','party',Erp.GetFieldValue("@helper_am"));
      Erp.SetParam('dgAdvInv','invid',Erp.GetParam("ID"));
      Erp.SetParam('dgAdvInv','dot',Erp.GetFieldValue("@voucherdate"));
    }
    if( vType == "P"){
      Erp.SetDisplay("@isinvoiceagainstadvance",Fn.CBool(Erp.GetFieldValue("@isreversechargeapplicable")));
      Erp.SetDisplay("btnAdvInv",isinvoiceagainstadvance);
    }
    Erp.SetDisplay("trAgainstAdvance",(vType!='DC' && vType!='PI' && vType!='Q'  && vType!='BOS'    || vType != 'SO'  ));
  }
  else
  {
    Erp.SetDisplay("trAgainstAdvance",false);
    Erp.SetDisplay("btnAdvInv",false);
    Erp.SetDisplay("@isinvoiceagainstadvance",false);
  }
}
function showAdvances()
{
  Erp.OpenPopup('pnlAdvanceInv',{
    onClose:function(){
    }
  }
               );
  Erp.SetDisplay('pnlAdvanceInv',true);
}
function OnCellEditing_dgAdvInv(gridId,args){
  /* if (args.colName=='adv_t')
  {
      args.editor.SetParam('_fc','lu_advanceTrans');
     args.editor.SetParam('party',Erp.GetFieldValue("@helper_am"));
    args.editor.SetParam('invid',Erp.GetParam("ID"));
  args.editor.SetParam('dot',Erp.GetFieldValue("@voucherdate"));
  }
  else*/ 
  if (args.colName=='ti')
  {
    args.editor.SetParam('party',Erp.GetFieldValue("@helper_am"));
    args.editor.SetParam('dot',Erp.GetFieldValue("@voucherdate"));
    args.editor.SetParam('_fc','lu_tiadvance');
  }
  else if (args.colName=='del')
  {
    delAdvInvRow(args.row);
  }
}
function OnCellChanged_dgAdvInv(gridId,args){
  if (args.colName=='ti')
  {
    if (args.value.Keys.length>0)    
      Erp.Grid.SetEditorValue(gridId,'adv_t',Fn.CStr(args.value.Keys[0]));
    if (args.value.CurrentRow.length>0)    
    {
      var tr=$(args.value.CurrentRow[0]);
      var balamt=Fn.CFlt( tr.find(".balamt").html());
      var baltaxable=Fn.CFlt( tr.find(".baltaxable").html());
      var balsgst=Fn.CFlt( tr.find(".balsgst").html());
      var balcgst=Fn.CFlt( tr.find(".balcgst").html());
      var baligst=Fn.CFlt( tr.find(".baligst").html());
      var balcess=Fn.CFlt( tr.find(".balcess").html());
      var gstrate=Fn.CFlt( tr.find(".gstrate").html());
      Erp.Grid.SetEditorValue(gridId,'adjamt',balamt);
      Erp.Grid.SetEditorValue(gridId,'adjustedtaxablevalue',baltaxable);
      Erp.Grid.SetEditorValue(gridId,'adjustedsgst',balsgst);
      Erp.Grid.SetEditorValue(gridId,'adjustedcgst',balcgst);
      Erp.Grid.SetEditorValue(gridId,'adjustedigst',baligst);
      Erp.Grid.SetEditorValue(gridId,'adjustedgstcess',balcess);
      Erp.Grid.SetEditorValue(gridId,'gstrate',gstrate);
    }
  }
  else if (args.colName=='adjamt')
  {
    var adjustedtaxablevalue=Fn.CFlt(Erp.Grid.GetEditorValue(gridId,'adjustedtaxablevalue',args.row));
    var adjustedsgst=Fn.CFlt(Erp.Grid.GetEditorValue(gridId,'adjustedsgst',args.row));
    var adjustedcgst=Fn.CFlt(Erp.Grid.GetEditorValue(gridId,'adjustedcgst',args.row));
    var adjustedigst=Fn.CFlt(Erp.Grid.GetEditorValue(gridId,'adjustedigst',args.row));
    var adjustedgstcess=Fn.CFlt(Erp.Grid.GetEditorValue(gridId,'adjustedgstcess',args.row));
    var amtCrnt=args.value;
    var sgstrate=(adjustedsgst/adjustedtaxablevalue)*100;
    var igstrate=(adjustedigst/adjustedtaxablevalue)*100;
    var cgstrate=(adjustedcgst/adjustedtaxablevalue)*100;
    var gstcessrate=(adjustedgstcess/adjustedtaxablevalue)*100;
    Erp.Grid.SetEditorValue(gridId,'adjustedtaxablevalue',amtCrnt);
    Erp.Grid.SetEditorValue(gridId,'adjustedcgst',(amtCrnt*cgstrate/100));
    Erp.Grid.SetEditorValue(gridId,'adjustedsgst',(amtCrnt*sgstrate/100));
    Erp.Grid.SetEditorValue(gridId,'adjustedigst',(amtCrnt*igstrate/100));
    Erp.Grid.SetEditorValue(gridId,'adjustedgstcess',(amtCrnt*gstcessrate/100));
  }
  else if (args.colName=='del')
  {
    delAdvInvRow(args.row);
  }
  CalculateColFooter_Adv();
}
function OnCellEditingOC(gridId,args){
  if (args.colName=='am')
    args.editor.SetParam('_fc','lu_other_charges');
}
function hideAdvancePopup()
{
  Erp.HidePopup('pnlAdvanceInv');
  return false;
}
function DistributeOC()
{
  var apportionate_cg=0;
  var apportionate_og=0;
  var apportionate_inv=0;
  var apportionate_ser=0;
  var grandTotal=0;
  var gridID="gridOC";
  var rowCount=Erp.Grid.GetRows(gridID).length;
  var gridID1="gridTI";
  var rowCount1=Erp.Grid.GetRows(gridID1).length;
  var error=false;
  gridID="gridTI";
  rowCount=Erp.Grid.GetRows(gridID).length;
  var netTotal_ticg=0;
  var netTotal_tiog=0;
  var netTotal_tiser=0;
  var netTotal_tiinv=0;
  var netTotal=Fn.CFlt(Erp.Grid.CalculateColumn('gridTI','nettotal','SUM'));
  if(netTotal > 0){
    for(var i=0;i<rowCount ; i++)
    {
      if(Fn.Eq( Erp.Grid.GetRowState(gridID,i),"DELETED"))
        continue;
      var itmType=Erp.Grid.GetEditorValue(gridID,'itmnaturecode',i);
      var netTotal_ti=Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'nettotal',i));
      if(!Fn.IsEmpty(itmType))
      {
        if(Fn.Eq(itmType,'cg'))
          netTotal_ticg=netTotal_ticg+netTotal_ti;
        if(Fn.Eq(itmType,'og'))
          netTotal_tiog=netTotal_tiog+netTotal_ti;
        if(Fn.Eq(itmType,'ser'))
          netTotal_tiser=netTotal_tiser+netTotal_ti;
        if(Fn.Eq(itmType,'inv'))
          netTotal_tiinv=netTotal_tiinv+netTotal_ti;
      }
      Erp.Grid.SetEditorValue(gridID,'othercharge',i,0);
    }
    var scat=  Erp.GetFieldValue('@gstsupplycategory');
    if(!Fn.Eq(scat,'Taxable'))
      return ;
    gridID="gridOC";
    rowCount=Erp.Grid.GetRows(gridID).length;
    for(var i=0;i<rowCount ; i++)
    {
      if(Fn.Eq( Erp.Grid.GetRowState(gridID,i),"DELETED"))
        continue;
      var amnature=Erp.Grid.GetEditorValue(gridID,'amnature',i);
      var debitcredit=Erp.Grid.GetEditorValue(gridID,'debitcredit',i);
      var c_amt=Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'creditamount',i));
      var d_amt=Fn.CFlt(Erp.Grid.GetEditorValue(gridID,'debitamount',i));
      var amtToDistribute=d_amt;
      if(Fn.Eq( debitcredit, "C"))
        amtToDistribute=c_amt;
      if(!Fn.IsEmpty(amnature))
      {
        var arr=amnature.split('|');
        if(arr.length >= 4){
          var isgst=Fn.CBool(arr[0]);
          var isapportionate_cg=Fn.CBool( arr[1]);
          var isapportionate_og=Fn.CBool(arr[2]);
          var isapportionate_inv=Fn.CBool(arr[3]);
          var isapportionate_ser=Fn.CBool(arr[4]);
          if(isgst){
            var totalDistribution=0;
            if(isapportionate_cg)
              totalDistribution+=netTotal_ticg
              if(isapportionate_og)
                totalDistribution+=netTotal_tiog
                if(isapportionate_inv)
                  totalDistribution+=netTotal_tiinv
                  if(isapportionate_ser)
                    totalDistribution+=netTotal_tiser
                    for(var k=0;k<rowCount1 ; k++)
                    {
                      if(Fn.Eq( Erp.Grid.GetRowState(gridID1,k),"DELETED"))
                        continue;
                      var itmType=Erp.Grid.GetEditorValue(gridID1,'itmnaturecode',k);
                      var netTotal_ti=Fn.CFlt(Erp.Grid.GetEditorValue(gridID1,'nettotal',k));
                      var calcAmt=0;
                      if(!Fn.IsEmpty(itmType))
                      {
                        if(Fn.Eq(itmType,'cg')  && isapportionate_cg){
                          calcAmt=amtToDistribute*(netTotal_ti/totalDistribution);
                        }
                        if(Fn.Eq(itmType,'og') && isapportionate_og)
                        {
                          calcAmt=amtToDistribute*(netTotal_ti/totalDistribution);
                        }
                        if(Fn.Eq(itmType,'ser') && isapportionate_ser)
                        {
                          calcAmt=amtToDistribute*(netTotal_ti/totalDistribution);
                        }
                        if(Fn.Eq(itmType,'inv') && isapportionate_inv)
                        {
                          calcAmt=amtToDistribute*(netTotal_ti/totalDistribution);
                        }
                        calcAmt+= Erp.Grid.GetEditorValue(gridID1,'othercharge',k);
                        Erp.Grid.SetEditorValue(gridID1,'othercharge',k,Fn.Round( calcAmt,2));
                      }
                    }
          }
        }
      }
    }
  }
  for(var k=0;k<rowCount1 ; k++)
  {
    var taxablevalue=Fn.CFlt( Erp.Grid.GetEditorValue('gridTI','taxablevalue',k));
    var othercharge=Fn.CFlt( Erp.Grid.GetEditorValue('gridTI','othercharge',k));
    Erp.Grid.SetEditorValue('gridTI','finaltaxable',k,taxablevalue+othercharge);
    CalculateRow('othercharge');
  }
  CalcTaxesAll();
  return false;
}
function CalculateColFooter_Adv()
{
  var gridid='dgAdvInv';
  CalculateColFooter(gridid,'adjamt');
  CalculateColFooter(gridid,'adjustedtaxablevalue');
  CalculateColFooter(gridid,'adjustedsgst');
  CalculateColFooter(gridid,'adjustedcgst');
  CalculateColFooter(gridid,'adjustedigst');
  CalculateColFooter(gridid,'adjustedgstcess');
  CalculateColFooter(gridid,'gstrate');
  var Total=Fn.Round(Erp.Grid.CalculateColumn(gridid,'adjamt','SUM'),2);
  var btnText='Advance Receipts ( '+Total+' ) ';
  if(vType == "P" || vType == "E")
    btnText='Advance Payment ( '+Total+' ) ';
  Erp.SetButtonLabel('btnAdvInv',  btnText);
}
function OnGridDataBound_dgAdvInv(gridId,args){
  CalculateColFooter_Adv();
}


DbReferences.push({Type:"Simple",Id:"db_fld_0",Columns:"field.helper_am.gstin"});window.db_fld_0='';
DbReferences.push({Type:"Simple",Id:"db_fld_1",Columns:"field.helper_tm.tmcode"});window.db_fld_1='';
DbReferences.push({Type:"Simple",Id:"db_fld_2",Columns:"field.helper_tm.tmcode"});window.db_fld_2='';
DbReferences.push({Type:"Simple",Id:"db_fld_3",Columns:"field.helper_tm.tmcode"});window.db_fld_3='';
DbReferences.push({Type:"Simple",Id:"db_fld_4",Columns:"field.invoicetype.invoicetypecode"});window.db_fld_4='';
DbReferences.push({Type:"Simple",Id:"db_fld_5",Columns:"field.invoicetype.invoicetypecode"});window.db_fld_5='';
DbReferences.push({Type:"Simple",Id:"db_fld_6",Columns:"field.helper_am1.ag.agcode"});window.db_fld_6='';
DbReferences.push({Type:"Simple",Id:"db_fld_7",Columns:"field.helper_am1.ag.agcode"});window.db_fld_7='';
DbReferences.push({Type:"Simple",Id:"db_fld_8",Columns:"field.taxreg.taxregstate.country"});window.db_fld_8='';
DbReferences.push({Type:"Simple",Id:"db_fld_9",Columns:"field.taxreg.taxregstate"});window.db_fld_9='';
DbReferences.push({Type:"Simple",Id:"db_fld_10",Columns:"field.helper_am.default_isexport"});window.db_fld_10='';
DbReferences.push({Type:"Simple",Id:"db_fld_11",Columns:"field.helper_am.default_gstsupplycategory"});window.db_fld_11='';
DbReferences.push({Type:"Simple",Id:"db_fld_12",Columns:"field.helper_am.default_gstsupplycategory"});window.db_fld_12='';
DbReferences.push({Type:"Simple",Id:"db_fld_13",Columns:"field.helper_am.gstin"});window.db_fld_13='';
DbReferences.push({Type:"Simple",Id:"db_fld_14",Columns:"field.invoicetype.invoicetypecode"});window.db_fld_14='';
DbReferences.push({Type:"Simple",Id:"db_fld_15",Columns:"field.taxreg.taxregstate"});window.db_fld_15='';
DbReferences.push({Type:"Simple",Id:"db_fld_16",Columns:"field.helper_am.am_state"});window.db_fld_16='';
DbReferences.push({Type:"Simple",Id:"db_fld_17",Columns:"setting.company.showaccountsfieldinvoucher"});window.db_fld_17='';
DbReferences.push({Type:"Simple",Id:"db_fld_18",Columns:"field.attachdocuments"});window.db_fld_18='';
DbReferences.push({Type:"Simple",Id:"db_fld_19",Columns:"setting.company.showothercharges"});window.db_fld_19='';
DbReferences.push({Type:"Simple",Id:"db_fld_20",Columns:"field.helper_tm.tmcode"});window.db_fld_20='';
DbReferences.push({Type:"Simple",Id:"db_fld_21",Columns:"field.helper_am.ag.mainag.agcode"});window.db_fld_21='';
DbReferences.push({Type:"Simple",Id:"db_fld_22",Columns:"field.helper_am.ag.mainag.agcode"});window.db_fld_22='';
DbReferences.push({Type:"Simple",Id:"db_fld_23",Columns:"field.helper_am.ag.mainag.agcode"});window.db_fld_23='';
DbReferences.push({Type:"Simple",Id:"db_fld_24",Columns:"field.helper_am.ag.mainag.agcode"});window.db_fld_24='';
DbReferences.push({Type:"Simple",Id:"db_fld_25",Columns:"field.helper_am.ag.mainag.agcode"});window.db_fld_25='';
DbReferences.push({Type:"Simple",Id:"db_fld_26",Columns:"field.helper_am.gstin"});window.db_fld_26='';
DbReferences.push({Type:"Simple",Id:"db_fld_27",Columns:"field.helper_am.ag.mainag.agcode"});window.db_fld_27='';
DbReferences.push({Type:"Simple",Id:"db_fld_28",Columns:"field.previoustr.supplytype.supplytype_pid"});window.db_fld_28='';
DbReferences.push({Type:"Simple",Id:"db_fld_29",Columns:"field.previoustr.supplytype.supplytypename"});window.db_fld_29='';
DbReferences.push({Type:"Simple",Id:"db_fld_30",Columns:"field.previoustr.pos.statelist_pid"});window.db_fld_30='';
DbReferences.push({Type:"Simple",Id:"db_fld_31",Columns:"field.previoustr.gstsupplycategory.gstsupplycategory_pid"});window.db_fld_31='';
DbReferences.push({Type:"Simple",Id:"db_fld_32",Columns:"field.previoustr.invoicetype.invoicetype_pid"});window.db_fld_32='';
DbReferences.push({Type:"Simple",Id:"db_fld_33",Columns:"field.previoustr.ecomtran"});window.db_fld_33='';
DbReferences.push({Type:"Simple",Id:"db_fld_34",Columns:"field.previoustr.ecommerceoperatoram.am_pid"});window.db_fld_34='';
DbReferences.push({Type:"Simple",Id:"db_fld_35",Columns:"field.previoustr.isreversechargeapplicable"});window.db_fld_35='';
DbReferences.push({Type:"Simple",Id:"db_fld_36",Columns:"field.previoustr.defaulttransactionbank.am_pid"});window.db_fld_36='';
DbReferences.push({Type:"Simple",Id:"db_fld_37",Columns:"field.previoustr.helper_am1.am_pid"});window.db_fld_37='';
DbReferences.push({Type:"Simple",Id:"db_fld_38",Columns:"field.previoustr.helper_tm.tm_pid"});window.db_fld_38='';
DbReferences.push({Type:"Simple",Id:"db_fld_39",Columns:"field.previoustr.helper_chequedrawnon"});window.db_fld_39='';
DbReferences.push({Type:"Simple",Id:"db_fld_40",Columns:"field.previoustr.helper_chequedate"});window.db_fld_40='';
DbReferences.push({Type:"Simple",Id:"db_fld_41",Columns:"field.previoustr.helper_tmreferenceno"});window.db_fld_41='';
DbReferences.push({Type:"Simple",Id:"db_fld_42",Columns:"field.previoustr.advanceamount"});window.db_fld_42='';
DbReferences.push({Type:"Simple",Id:"db_fld_43",Columns:"field.previoustr.helper_amount1"});window.db_fld_43='';
DbReferences.push({Type:"Simple",Id:"db_fld_44",Columns:"field.invoicetype.inward"});window.db_fld_44='';
DbReferences.push({Type:"Simple",Id:"db_fld_45",Columns:"field.invoicetype.outward"});window.db_fld_45='';
DbReferences.push({Type:"Simple",Id:"db_fld_46",Columns:"field.taxreg.taxregstate"});window.db_fld_46='';
DbReferences.push({Type:"Simple",Id:"db_fld_47",Columns:"field.helper_am.gstin"});window.db_fld_47='';
DbReferences.push({Type:"Simple",Id:"db_fld_48",Columns:"field.invoicetype.invoicetypecode"});window.db_fld_48='';
